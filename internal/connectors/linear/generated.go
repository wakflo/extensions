// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package linear

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Attachment collection filtering options.
type AttachmentCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the subtitle.
	Subtitle *NullableStringComparator `json:"subtitle,omitempty"`
	// Comparator for the url.
	Url *StringComparator `json:"url,omitempty"`
	// Filters that the attachments creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Comparator for the source type.
	SourceType *SourceTypeComparator `json:"sourceType,omitempty"`
	// Compound filters, all of which need to be matched by the attachment.
	And []*AttachmentCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the attachment.
	Or []*AttachmentCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some attachments.
	Some *AttachmentFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all attachments.
	Every *AttachmentFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns AttachmentCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns AttachmentCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns AttachmentCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetTitle returns AttachmentCollectionFilter.Title, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetTitle() *StringComparator { return v.Title }

// GetSubtitle returns AttachmentCollectionFilter.Subtitle, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSubtitle() *NullableStringComparator { return v.Subtitle }

// GetUrl returns AttachmentCollectionFilter.Url, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetUrl() *StringComparator { return v.Url }

// GetCreator returns AttachmentCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetSourceType returns AttachmentCollectionFilter.SourceType, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSourceType() *SourceTypeComparator { return v.SourceType }

// GetAnd returns AttachmentCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetAnd() []*AttachmentCollectionFilter { return v.And }

// GetOr returns AttachmentCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetOr() []*AttachmentCollectionFilter { return v.Or }

// GetSome returns AttachmentCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetSome() *AttachmentFilter { return v.Some }

// GetEvery returns AttachmentCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetEvery() *AttachmentFilter { return v.Every }

// GetLength returns AttachmentCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *AttachmentCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Attachment filtering options.
type AttachmentFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the subtitle.
	Subtitle *NullableStringComparator `json:"subtitle,omitempty"`
	// Comparator for the url.
	Url *StringComparator `json:"url,omitempty"`
	// Filters that the attachments creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Comparator for the source type.
	SourceType *SourceTypeComparator `json:"sourceType,omitempty"`
	// Compound filters, all of which need to be matched by the attachment.
	And []*AttachmentFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the attachment.
	Or []*AttachmentFilter `json:"or,omitempty"`
}

// GetId returns AttachmentFilter.Id, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns AttachmentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns AttachmentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetTitle returns AttachmentFilter.Title, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetTitle() *StringComparator { return v.Title }

// GetSubtitle returns AttachmentFilter.Subtitle, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetSubtitle() *NullableStringComparator { return v.Subtitle }

// GetUrl returns AttachmentFilter.Url, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetUrl() *StringComparator { return v.Url }

// GetCreator returns AttachmentFilter.Creator, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetSourceType returns AttachmentFilter.SourceType, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetSourceType() *SourceTypeComparator { return v.SourceType }

// GetAnd returns AttachmentFilter.And, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetAnd() []*AttachmentFilter { return v.And }

// GetOr returns AttachmentFilter.Or, and is useful for accessing the field via an interface.
func (v *AttachmentFilter) GetOr() []*AttachmentFilter { return v.Or }

// Comparator for booleans.
type BooleanComparator struct {
	// Equals constraint.
	Eq bool `json:"eq"`
	// Not equals constraint.
	Neq bool `json:"neq"`
}

// GetEq returns BooleanComparator.Eq, and is useful for accessing the field via an interface.
func (v *BooleanComparator) GetEq() bool { return v.Eq }

// GetNeq returns BooleanComparator.Neq, and is useful for accessing the field via an interface.
func (v *BooleanComparator) GetNeq() bool { return v.Neq }

// Comment filtering options.
type CommentCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the comments body.
	Body *StringComparator `json:"body,omitempty"`
	// Filters that the comments creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
	// Filters that the comments issue must satisfy.
	Issue *NullableIssueFilter `json:"issue,omitempty"`
	// Filters that the comments project update must satisfy.
	ProjectUpdate *ProjectUpdateFilter `json:"projectUpdate,omitempty"`
	// Filters that the comment parent must satisfy.
	Parent *NullableCommentFilter `json:"parent,omitempty"`
	// Filters that the comments document content must satisfy.
	DocumentContent *DocumentContentFilter `json:"documentContent,omitempty"`
	// Filters that the comments reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the comment's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the comment.
	And []*CommentCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the comment.
	Or []*CommentCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some comments.
	Some *CommentFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all comments.
	Every *CommentFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns CommentCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns CommentCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns CommentCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetBody returns CommentCollectionFilter.Body, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetBody() *StringComparator { return v.Body }

// GetUser returns CommentCollectionFilter.User, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetUser() *UserFilter { return v.User }

// GetIssue returns CommentCollectionFilter.Issue, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetIssue() *NullableIssueFilter { return v.Issue }

// GetProjectUpdate returns CommentCollectionFilter.ProjectUpdate, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetProjectUpdate() *ProjectUpdateFilter { return v.ProjectUpdate }

// GetParent returns CommentCollectionFilter.Parent, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetParent() *NullableCommentFilter { return v.Parent }

// GetDocumentContent returns CommentCollectionFilter.DocumentContent, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetDocumentContent() *DocumentContentFilter {
	return v.DocumentContent
}

// GetReactions returns CommentCollectionFilter.Reactions, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns CommentCollectionFilter.Needs, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns CommentCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetAnd() []*CommentCollectionFilter { return v.And }

// GetOr returns CommentCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetOr() []*CommentCollectionFilter { return v.Or }

// GetSome returns CommentCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetSome() *CommentFilter { return v.Some }

// GetEvery returns CommentCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetEvery() *CommentFilter { return v.Every }

// GetLength returns CommentCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *CommentCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Comment filtering options.
type CommentFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the comments body.
	Body *StringComparator `json:"body,omitempty"`
	// Filters that the comments creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
	// Filters that the comments issue must satisfy.
	Issue *NullableIssueFilter `json:"issue,omitempty"`
	// Filters that the comments project update must satisfy.
	ProjectUpdate *ProjectUpdateFilter `json:"projectUpdate,omitempty"`
	// Filters that the comment parent must satisfy.
	Parent *NullableCommentFilter `json:"parent,omitempty"`
	// Filters that the comments document content must satisfy.
	DocumentContent *DocumentContentFilter `json:"documentContent,omitempty"`
	// Filters that the comments reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the comment's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the comment.
	And []*CommentFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the comment.
	Or []*CommentFilter `json:"or,omitempty"`
}

// GetId returns CommentFilter.Id, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns CommentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns CommentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetBody returns CommentFilter.Body, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetBody() *StringComparator { return v.Body }

// GetUser returns CommentFilter.User, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetUser() *UserFilter { return v.User }

// GetIssue returns CommentFilter.Issue, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetIssue() *NullableIssueFilter { return v.Issue }

// GetProjectUpdate returns CommentFilter.ProjectUpdate, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetProjectUpdate() *ProjectUpdateFilter { return v.ProjectUpdate }

// GetParent returns CommentFilter.Parent, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetParent() *NullableCommentFilter { return v.Parent }

// GetDocumentContent returns CommentFilter.DocumentContent, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetDocumentContent() *DocumentContentFilter { return v.DocumentContent }

// GetReactions returns CommentFilter.Reactions, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns CommentFilter.Needs, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns CommentFilter.And, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetAnd() []*CommentFilter { return v.And }

// GetOr returns CommentFilter.Or, and is useful for accessing the field via an interface.
func (v *CommentFilter) GetOr() []*CommentFilter { return v.Or }

// [Internal] Comparator for content.
type ContentComparator struct {
	// [Internal] Contains constraint.
	Contains string `json:"contains"`
	// [Internal] Not-contains constraint.
	NotContains string `json:"notContains"`
}

// GetContains returns ContentComparator.Contains, and is useful for accessing the field via an interface.
func (v *ContentComparator) GetContains() string { return v.Contains }

// GetNotContains returns ContentComparator.NotContains, and is useful for accessing the field via an interface.
func (v *ContentComparator) GetNotContains() string { return v.NotContains }

// Customer filtering options.
type CustomerFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the customer name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the customer slack channel ID.
	SlackChannelId *StringComparator `json:"slackChannelId,omitempty"`
	// Comparator for the customer's domains.
	Domains *StringArrayComparator `json:"domains,omitempty"`
	// Comparator for the customer's external IDs.
	ExternalIds *StringArrayComparator `json:"externalIds,omitempty"`
	// Filters that the customer owner must satisfy.
	Owner *UserFilter `json:"owner,omitempty"`
	// Filters that the customer's needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the customer.
	And []*CustomerFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the customer.
	Or []*CustomerFilter `json:"or,omitempty"`
}

// GetId returns CustomerFilter.Id, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns CustomerFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns CustomerFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns CustomerFilter.Name, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetName() *StringComparator { return v.Name }

// GetSlackChannelId returns CustomerFilter.SlackChannelId, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetSlackChannelId() *StringComparator { return v.SlackChannelId }

// GetDomains returns CustomerFilter.Domains, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetDomains() *StringArrayComparator { return v.Domains }

// GetExternalIds returns CustomerFilter.ExternalIds, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetExternalIds() *StringArrayComparator { return v.ExternalIds }

// GetOwner returns CustomerFilter.Owner, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetOwner() *UserFilter { return v.Owner }

// GetNeeds returns CustomerFilter.Needs, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns CustomerFilter.And, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetAnd() []*CustomerFilter { return v.And }

// GetOr returns CustomerFilter.Or, and is useful for accessing the field via an interface.
func (v *CustomerFilter) GetOr() []*CustomerFilter { return v.Or }

// Customer needs filtering options.
type CustomerNeedCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the customer need priority.
	Priority *NumberComparator `json:"priority,omitempty"`
	// Filters that the need's project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the need's issue must satisfy.
	Issue *NullableIssueFilter `json:"issue,omitempty"`
	// Filters that the need's comment must satisfy.
	Comment *NullableCommentFilter `json:"comment,omitempty"`
	// Filters that the need's customer must satisfy.
	Customer *CustomerFilter `json:"customer,omitempty"`
	// Compound filters, all of which need to be matched by the customer needs.
	And []*CustomerNeedCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the customer needs.
	Or []*CustomerNeedCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some customer needs.
	Some *CustomerNeedFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all customer needs.
	Every *CustomerNeedFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns CustomerNeedCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns CustomerNeedCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns CustomerNeedCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetPriority returns CustomerNeedCollectionFilter.Priority, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetPriority() *NumberComparator { return v.Priority }

// GetProject returns CustomerNeedCollectionFilter.Project, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetIssue returns CustomerNeedCollectionFilter.Issue, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetIssue() *NullableIssueFilter { return v.Issue }

// GetComment returns CustomerNeedCollectionFilter.Comment, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetComment() *NullableCommentFilter { return v.Comment }

// GetCustomer returns CustomerNeedCollectionFilter.Customer, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetCustomer() *CustomerFilter { return v.Customer }

// GetAnd returns CustomerNeedCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetAnd() []*CustomerNeedCollectionFilter { return v.And }

// GetOr returns CustomerNeedCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetOr() []*CustomerNeedCollectionFilter { return v.Or }

// GetSome returns CustomerNeedCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetSome() *CustomerNeedFilter { return v.Some }

// GetEvery returns CustomerNeedCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetEvery() *CustomerNeedFilter { return v.Every }

// GetLength returns CustomerNeedCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *CustomerNeedCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Customer filtering options.
type CustomerNeedFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the customer need priority.
	Priority *NumberComparator `json:"priority,omitempty"`
	// Filters that the need's project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the need's issue must satisfy.
	Issue *NullableIssueFilter `json:"issue,omitempty"`
	// Filters that the need's comment must satisfy.
	Comment *NullableCommentFilter `json:"comment,omitempty"`
	// Filters that the need's customer must satisfy.
	Customer *CustomerFilter `json:"customer,omitempty"`
	// Compound filters, all of which need to be matched by the customer need.
	And []*CustomerNeedFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the customer need.
	Or []*CustomerNeedFilter `json:"or,omitempty"`
}

// GetId returns CustomerNeedFilter.Id, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns CustomerNeedFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns CustomerNeedFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetPriority returns CustomerNeedFilter.Priority, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetPriority() *NumberComparator { return v.Priority }

// GetProject returns CustomerNeedFilter.Project, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetIssue returns CustomerNeedFilter.Issue, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetIssue() *NullableIssueFilter { return v.Issue }

// GetComment returns CustomerNeedFilter.Comment, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetComment() *NullableCommentFilter { return v.Comment }

// GetCustomer returns CustomerNeedFilter.Customer, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetCustomer() *CustomerFilter { return v.Customer }

// GetAnd returns CustomerNeedFilter.And, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetAnd() []*CustomerNeedFilter { return v.And }

// GetOr returns CustomerNeedFilter.Or, and is useful for accessing the field via an interface.
func (v *CustomerNeedFilter) GetOr() []*CustomerNeedFilter { return v.Or }

// Comparator for dates.
type DateComparator struct {
	// Equals constraint.
	Eq time.Time `json:"eq"`
	// Not-equals constraint.
	Neq time.Time `json:"neq"`
	// In-array constraint.
	In []time.Time `json:"in"`
	// Not-in-array constraint.
	Nin []time.Time `json:"nin"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt time.Time `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte time.Time `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt time.Time `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte time.Time `json:"gte"`
}

// GetEq returns DateComparator.Eq, and is useful for accessing the field via an interface.
func (v *DateComparator) GetEq() time.Time { return v.Eq }

// GetNeq returns DateComparator.Neq, and is useful for accessing the field via an interface.
func (v *DateComparator) GetNeq() time.Time { return v.Neq }

// GetIn returns DateComparator.In, and is useful for accessing the field via an interface.
func (v *DateComparator) GetIn() []time.Time { return v.In }

// GetNin returns DateComparator.Nin, and is useful for accessing the field via an interface.
func (v *DateComparator) GetNin() []time.Time { return v.Nin }

// GetLt returns DateComparator.Lt, and is useful for accessing the field via an interface.
func (v *DateComparator) GetLt() time.Time { return v.Lt }

// GetLte returns DateComparator.Lte, and is useful for accessing the field via an interface.
func (v *DateComparator) GetLte() time.Time { return v.Lte }

// GetGt returns DateComparator.Gt, and is useful for accessing the field via an interface.
func (v *DateComparator) GetGt() time.Time { return v.Gt }

// GetGte returns DateComparator.Gte, and is useful for accessing the field via an interface.
func (v *DateComparator) GetGte() time.Time { return v.Gte }

// Document content filtering options.
type DocumentContentFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Filters that the document content project must satisfy.
	Project *ProjectFilter `json:"project,omitempty"`
	// Filters that the document content document must satisfy.
	Document *DocumentFilter `json:"document,omitempty"`
}

// GetId returns DocumentContentFilter.Id, and is useful for accessing the field via an interface.
func (v *DocumentContentFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns DocumentContentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *DocumentContentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns DocumentContentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DocumentContentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetProject returns DocumentContentFilter.Project, and is useful for accessing the field via an interface.
func (v *DocumentContentFilter) GetProject() *ProjectFilter { return v.Project }

// GetDocument returns DocumentContentFilter.Document, and is useful for accessing the field via an interface.
func (v *DocumentContentFilter) GetDocument() *DocumentFilter { return v.Document }

// Document filtering options.
type DocumentFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the document title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the document slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Filters that the document's creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Filters that the document's project must satisfy.
	Project *ProjectFilter `json:"project,omitempty"`
	// Filters that the document's initiative must satisfy.
	Initiative *InitiativeFilter `json:"initiative,omitempty"`
	// Compound filters, all of which need to be matched by the document.
	And []*DocumentFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the document.
	Or []*DocumentFilter `json:"or,omitempty"`
}

// GetId returns DocumentFilter.Id, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns DocumentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns DocumentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetTitle returns DocumentFilter.Title, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetTitle() *StringComparator { return v.Title }

// GetSlugId returns DocumentFilter.SlugId, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetCreator returns DocumentFilter.Creator, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetCreator() *UserFilter { return v.Creator }

// GetProject returns DocumentFilter.Project, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetProject() *ProjectFilter { return v.Project }

// GetInitiative returns DocumentFilter.Initiative, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetInitiative() *InitiativeFilter { return v.Initiative }

// GetAnd returns DocumentFilter.And, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetAnd() []*DocumentFilter { return v.And }

// GetOr returns DocumentFilter.Or, and is useful for accessing the field via an interface.
func (v *DocumentFilter) GetOr() []*DocumentFilter { return v.Or }

// Comparator for estimates.
type EstimateComparator struct {
	// Equals constraint.
	Eq float64 `json:"eq"`
	// Not-equals constraint.
	Neq float64 `json:"neq"`
	// In-array constraint.
	In []float64 `json:"in"`
	// Not-in-array constraint.
	Nin []float64 `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt float64 `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte float64 `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt float64 `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte float64 `json:"gte"`
	// Compound filters, all of which need to be matched by the estimate.
	Or []*NullableNumberComparator `json:"or,omitempty"`
	// Compound filters, one of which need to be matched by the estimate.
	And []*NullableNumberComparator `json:"and,omitempty"`
}

// GetEq returns EstimateComparator.Eq, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetEq() float64 { return v.Eq }

// GetNeq returns EstimateComparator.Neq, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNeq() float64 { return v.Neq }

// GetIn returns EstimateComparator.In, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetIn() []float64 { return v.In }

// GetNin returns EstimateComparator.Nin, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNin() []float64 { return v.Nin }

// GetNull returns EstimateComparator.Null, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetNull() bool { return v.Null }

// GetLt returns EstimateComparator.Lt, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetLt() float64 { return v.Lt }

// GetLte returns EstimateComparator.Lte, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetLte() float64 { return v.Lte }

// GetGt returns EstimateComparator.Gt, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetGt() float64 { return v.Gt }

// GetGte returns EstimateComparator.Gte, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetGte() float64 { return v.Gte }

// GetOr returns EstimateComparator.Or, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetOr() []*NullableNumberComparator { return v.Or }

// GetAnd returns EstimateComparator.And, and is useful for accessing the field via an interface.
func (v *EstimateComparator) GetAnd() []*NullableNumberComparator { return v.And }

// Comparator for identifiers.
type IDComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
}

// GetEq returns IDComparator.Eq, and is useful for accessing the field via an interface.
func (v *IDComparator) GetEq() string { return v.Eq }

// GetNeq returns IDComparator.Neq, and is useful for accessing the field via an interface.
func (v *IDComparator) GetNeq() string { return v.Neq }

// GetIn returns IDComparator.In, and is useful for accessing the field via an interface.
func (v *IDComparator) GetIn() []string { return v.In }

// GetNin returns IDComparator.Nin, and is useful for accessing the field via an interface.
func (v *IDComparator) GetNin() []string { return v.Nin }

// Initiative collection filtering options.
type InitiativeCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the initiative name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the initiative slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Comparator for the initiative status.
	Status *StringComparator `json:"status,omitempty"`
	// Filters that the initiative creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Compound filters, all of which need to be matched by the initiative.
	And []*InitiativeCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the initiative.
	Or []*InitiativeCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some initiatives.
	Some *InitiativeFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all initiatives.
	Every *InitiativeFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns InitiativeCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns InitiativeCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns InitiativeCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns InitiativeCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns InitiativeCollectionFilter.SlugId, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetStatus returns InitiativeCollectionFilter.Status, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetStatus() *StringComparator { return v.Status }

// GetCreator returns InitiativeCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetCreator() *UserFilter { return v.Creator }

// GetAnd returns InitiativeCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetAnd() []*InitiativeCollectionFilter { return v.And }

// GetOr returns InitiativeCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetOr() []*InitiativeCollectionFilter { return v.Or }

// GetSome returns InitiativeCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetSome() *InitiativeFilter { return v.Some }

// GetEvery returns InitiativeCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetEvery() *InitiativeFilter { return v.Every }

// GetLength returns InitiativeCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *InitiativeCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Initiative filtering options.
type InitiativeFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the initiative name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the initiative slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Comparator for the initiative status.
	Status *StringComparator `json:"status,omitempty"`
	// Filters that the initiative creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Compound filters, all of which need to be matched by the initiative.
	And []*InitiativeFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the initiative.
	Or []*InitiativeFilter `json:"or,omitempty"`
}

// GetId returns InitiativeFilter.Id, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns InitiativeFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns InitiativeFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns InitiativeFilter.Name, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns InitiativeFilter.SlugId, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetStatus returns InitiativeFilter.Status, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetStatus() *StringComparator { return v.Status }

// GetCreator returns InitiativeFilter.Creator, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetCreator() *UserFilter { return v.Creator }

// GetAnd returns InitiativeFilter.And, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetAnd() []*InitiativeFilter { return v.And }

// GetOr returns InitiativeFilter.Or, and is useful for accessing the field via an interface.
func (v *InitiativeFilter) GetOr() []*InitiativeFilter { return v.Or }

// Issue filtering options.
type IssueCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the source must satisfy.
	SourceMetadata *SourceMetadataComparator `json:"sourceMetadata,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the issue's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the issue.
	And []*IssueCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*IssueCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some issues.
	Some *IssueFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all issues.
	Every *IssueFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns IssueCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns IssueCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns IssueCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetNumber returns IssueCollectionFilter.Number, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetNumber() *NumberComparator { return v.Number }

// GetTitle returns IssueCollectionFilter.Title, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTitle() *StringComparator { return v.Title }

// GetDescription returns IssueCollectionFilter.Description, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetPriority returns IssueCollectionFilter.Priority, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetEstimate returns IssueCollectionFilter.Estimate, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetStartedAt returns IssueCollectionFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetTriagedAt returns IssueCollectionFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetCompletedAt returns IssueCollectionFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCanceledAt returns IssueCollectionFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetAutoClosedAt returns IssueCollectionFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetAutoArchivedAt returns IssueCollectionFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetDueDate returns IssueCollectionFilter.DueDate, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetSnoozedUntilAt returns IssueCollectionFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetAssignee returns IssueCollectionFilter.Assignee, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetLastAppliedTemplate returns IssueCollectionFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetLastAppliedTemplate() *NullableTemplateFilter {
	return v.LastAppliedTemplate
}

// GetSourceMetadata returns IssueCollectionFilter.SourceMetadata, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSourceMetadata() *SourceMetadataComparator {
	return v.SourceMetadata
}

// GetCreator returns IssueCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetParent returns IssueCollectionFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetSnoozedBy returns IssueCollectionFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetLabels returns IssueCollectionFilter.Labels, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetSubscribers returns IssueCollectionFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns IssueCollectionFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetTeam() *TeamFilter { return v.Team }

// GetProjectMilestone returns IssueCollectionFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetComments returns IssueCollectionFilter.Comments, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCycle returns IssueCollectionFilter.Cycle, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetProject returns IssueCollectionFilter.Project, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetState returns IssueCollectionFilter.State, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetState() *WorkflowStateFilter { return v.State }

// GetChildren returns IssueCollectionFilter.Children, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetAttachments returns IssueCollectionFilter.Attachments, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetSearchableContent returns IssueCollectionFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetHasRelatedRelations returns IssueCollectionFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDuplicateRelations returns IssueCollectionFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasBlockedByRelations returns IssueCollectionFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns IssueCollectionFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetSlaStatus returns IssueCollectionFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetReactions returns IssueCollectionFilter.Reactions, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns IssueCollectionFilter.Needs, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns IssueCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetAnd() []*IssueCollectionFilter { return v.And }

// GetOr returns IssueCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetOr() []*IssueCollectionFilter { return v.Or }

// GetSome returns IssueCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetSome() *IssueFilter { return v.Some }

// GetEvery returns IssueCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetEvery() *IssueFilter { return v.Every }

// GetLength returns IssueCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *IssueCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Issue filtering options.
type IssueFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the source must satisfy.
	SourceMetadata *SourceMetadataComparator `json:"sourceMetadata,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the issue's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the issue.
	And []*IssueFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*IssueFilter `json:"or,omitempty"`
}

// GetId returns IssueFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns IssueFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns IssueFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetNumber returns IssueFilter.Number, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetNumber() *NumberComparator { return v.Number }

// GetTitle returns IssueFilter.Title, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTitle() *StringComparator { return v.Title }

// GetDescription returns IssueFilter.Description, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetPriority returns IssueFilter.Priority, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetEstimate returns IssueFilter.Estimate, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetStartedAt returns IssueFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetTriagedAt returns IssueFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetCompletedAt returns IssueFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCanceledAt returns IssueFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetAutoClosedAt returns IssueFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetAutoArchivedAt returns IssueFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetDueDate returns IssueFilter.DueDate, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetSnoozedUntilAt returns IssueFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetAssignee returns IssueFilter.Assignee, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetLastAppliedTemplate returns IssueFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetLastAppliedTemplate() *NullableTemplateFilter { return v.LastAppliedTemplate }

// GetSourceMetadata returns IssueFilter.SourceMetadata, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSourceMetadata() *SourceMetadataComparator { return v.SourceMetadata }

// GetCreator returns IssueFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetParent returns IssueFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetSnoozedBy returns IssueFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetLabels returns IssueFilter.Labels, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetSubscribers returns IssueFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns IssueFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetTeam() *TeamFilter { return v.Team }

// GetProjectMilestone returns IssueFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetComments returns IssueFilter.Comments, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCycle returns IssueFilter.Cycle, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetProject returns IssueFilter.Project, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetState returns IssueFilter.State, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetState() *WorkflowStateFilter { return v.State }

// GetChildren returns IssueFilter.Children, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetAttachments returns IssueFilter.Attachments, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetSearchableContent returns IssueFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetHasRelatedRelations returns IssueFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDuplicateRelations returns IssueFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasBlockedByRelations returns IssueFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns IssueFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetSlaStatus returns IssueFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetReactions returns IssueFilter.Reactions, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns IssueFilter.Needs, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns IssueFilter.And, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetAnd() []*IssueFilter { return v.And }

// GetOr returns IssueFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueFilter) GetOr() []*IssueFilter { return v.Or }

// Issue label filtering options.
type IssueLabelCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the name.
	Name *StringComparator `json:"name,omitempty"`
	// Filters that the issue labels creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issue labels team must satisfy.
	Team *NullableTeamFilter `json:"team,omitempty"`
	// Filters that the issue label's parent label must satisfy.
	Parent *IssueLabelFilter `json:"parent,omitempty"`
	// Compound filters, all of which need to be matched by the label.
	And []*IssueLabelCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the label.
	Or []*IssueLabelCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some issue labels.
	Some *IssueLabelFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all issue labels.
	Every *IssueLabelFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns IssueLabelCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns IssueLabelCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns IssueLabelCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns IssueLabelCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetName() *StringComparator { return v.Name }

// GetCreator returns IssueLabelCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetTeam returns IssueLabelCollectionFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetTeam() *NullableTeamFilter { return v.Team }

// GetParent returns IssueLabelCollectionFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetParent() *IssueLabelFilter { return v.Parent }

// GetAnd returns IssueLabelCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetAnd() []*IssueLabelCollectionFilter { return v.And }

// GetOr returns IssueLabelCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetOr() []*IssueLabelCollectionFilter { return v.Or }

// GetSome returns IssueLabelCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetSome() *IssueLabelFilter { return v.Some }

// GetEvery returns IssueLabelCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetEvery() *IssueLabelFilter { return v.Every }

// GetLength returns IssueLabelCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *IssueLabelCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Issue label filtering options.
type IssueLabelFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the name.
	Name *StringComparator `json:"name,omitempty"`
	// Filters that the issue labels creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issue labels team must satisfy.
	Team *NullableTeamFilter `json:"team,omitempty"`
	// Filters that the issue label's parent label must satisfy.
	Parent *IssueLabelFilter `json:"parent,omitempty"`
	// Compound filters, all of which need to be matched by the label.
	And []*IssueLabelFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the label.
	Or []*IssueLabelFilter `json:"or,omitempty"`
}

// GetId returns IssueLabelFilter.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns IssueLabelFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns IssueLabelFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns IssueLabelFilter.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetName() *StringComparator { return v.Name }

// GetCreator returns IssueLabelFilter.Creator, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetTeam returns IssueLabelFilter.Team, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetTeam() *NullableTeamFilter { return v.Team }

// GetParent returns IssueLabelFilter.Parent, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetParent() *IssueLabelFilter { return v.Parent }

// GetAnd returns IssueLabelFilter.And, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetAnd() []*IssueLabelFilter { return v.And }

// GetOr returns IssueLabelFilter.Or, and is useful for accessing the field via an interface.
func (v *IssueLabelFilter) GetOr() []*IssueLabelFilter { return v.Or }

// IssueLabelsIssueLabelsIssueLabelConnection includes the requested fields of the GraphQL type IssueLabelConnection.
type IssueLabelsIssueLabelsIssueLabelConnection struct {
	Nodes []*IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel `json:"nodes"`
}

// GetNodes returns IssueLabelsIssueLabelsIssueLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *IssueLabelsIssueLabelsIssueLabelConnection) GetNodes() []*IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel {
	return v.Nodes
}

// IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel includes the requested fields of the GraphQL type IssueLabel.
// The GraphQL type's documentation follows.
//
// Labels that can be associated with issues.
type IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The label's name.
	Name string `json:"name"`
}

// GetId returns IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel.Id, and is useful for accessing the field via an interface.
func (v *IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel) GetId() string { return v.Id }

// GetName returns IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel.Name, and is useful for accessing the field via an interface.
func (v *IssueLabelsIssueLabelsIssueLabelConnectionNodesIssueLabel) GetName() string { return v.Name }

// IssueLabelsResponse is returned by IssueLabels on success.
type IssueLabelsResponse struct {
	// All issue labels.
	IssueLabels *IssueLabelsIssueLabelsIssueLabelConnection `json:"issueLabels"`
}

// GetIssueLabels returns IssueLabelsResponse.IssueLabels, and is useful for accessing the field via an interface.
func (v *IssueLabelsResponse) GetIssueLabels() *IssueLabelsIssueLabelsIssueLabelConnection {
	return v.IssueLabels
}

// Comment filtering options.
type NullableCommentFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the comments body.
	Body *StringComparator `json:"body,omitempty"`
	// Filters that the comments creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
	// Filters that the comments issue must satisfy.
	Issue *NullableIssueFilter `json:"issue,omitempty"`
	// Filters that the comments project update must satisfy.
	ProjectUpdate *ProjectUpdateFilter `json:"projectUpdate,omitempty"`
	// Filters that the comment parent must satisfy.
	Parent *NullableCommentFilter `json:"parent,omitempty"`
	// Filters that the comments document content must satisfy.
	DocumentContent *DocumentContentFilter `json:"documentContent,omitempty"`
	// Filters that the comments reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the comment's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the comment.
	And []*NullableCommentFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the comment.
	Or []*NullableCommentFilter `json:"or,omitempty"`
}

// GetId returns NullableCommentFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableCommentFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableCommentFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetBody returns NullableCommentFilter.Body, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetBody() *StringComparator { return v.Body }

// GetUser returns NullableCommentFilter.User, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetUser() *UserFilter { return v.User }

// GetIssue returns NullableCommentFilter.Issue, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetIssue() *NullableIssueFilter { return v.Issue }

// GetProjectUpdate returns NullableCommentFilter.ProjectUpdate, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetProjectUpdate() *ProjectUpdateFilter { return v.ProjectUpdate }

// GetParent returns NullableCommentFilter.Parent, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetParent() *NullableCommentFilter { return v.Parent }

// GetDocumentContent returns NullableCommentFilter.DocumentContent, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetDocumentContent() *DocumentContentFilter { return v.DocumentContent }

// GetReactions returns NullableCommentFilter.Reactions, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns NullableCommentFilter.Needs, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetNull returns NullableCommentFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableCommentFilter.And, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetAnd() []*NullableCommentFilter { return v.And }

// GetOr returns NullableCommentFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableCommentFilter) GetOr() []*NullableCommentFilter { return v.Or }

// Cycle filtering options.
type NullableCycleFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the cycle number.
	Number *NumberComparator `json:"number,omitempty"`
	// Comparator for the cycle name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the cycle start date.
	StartsAt *DateComparator `json:"startsAt,omitempty"`
	// Comparator for the cycle ends at date.
	EndsAt *DateComparator `json:"endsAt,omitempty"`
	// Comparator for the cycle completed at date.
	CompletedAt *DateComparator `json:"completedAt,omitempty"`
	// Comparator for the filtering active cycle.
	IsActive *BooleanComparator `json:"isActive,omitempty"`
	// Comparator for filtering for whether the cycle is currently in cooldown.
	IsInCooldown *BooleanComparator `json:"isInCooldown,omitempty"`
	// Comparator for the filtering next cycle.
	IsNext *BooleanComparator `json:"isNext,omitempty"`
	// Comparator for the filtering previous cycle.
	IsPrevious *BooleanComparator `json:"isPrevious,omitempty"`
	// Comparator for the filtering future cycles.
	IsFuture *BooleanComparator `json:"isFuture,omitempty"`
	// Comparator for the filtering past cycles.
	IsPast *BooleanComparator `json:"isPast,omitempty"`
	// Filters that the cycles team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Filters that the cycles issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, one of which need to be matched by the cycle.
	And []*NullableCycleFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the cycle.
	Or []*NullableCycleFilter `json:"or,omitempty"`
}

// GetId returns NullableCycleFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableCycleFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableCycleFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetNumber returns NullableCycleFilter.Number, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetNumber() *NumberComparator { return v.Number }

// GetName returns NullableCycleFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetName() *StringComparator { return v.Name }

// GetStartsAt returns NullableCycleFilter.StartsAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetStartsAt() *DateComparator { return v.StartsAt }

// GetEndsAt returns NullableCycleFilter.EndsAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetEndsAt() *DateComparator { return v.EndsAt }

// GetCompletedAt returns NullableCycleFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetCompletedAt() *DateComparator { return v.CompletedAt }

// GetIsActive returns NullableCycleFilter.IsActive, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsActive() *BooleanComparator { return v.IsActive }

// GetIsInCooldown returns NullableCycleFilter.IsInCooldown, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsInCooldown() *BooleanComparator { return v.IsInCooldown }

// GetIsNext returns NullableCycleFilter.IsNext, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsNext() *BooleanComparator { return v.IsNext }

// GetIsPrevious returns NullableCycleFilter.IsPrevious, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsPrevious() *BooleanComparator { return v.IsPrevious }

// GetIsFuture returns NullableCycleFilter.IsFuture, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsFuture() *BooleanComparator { return v.IsFuture }

// GetIsPast returns NullableCycleFilter.IsPast, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIsPast() *BooleanComparator { return v.IsPast }

// GetTeam returns NullableCycleFilter.Team, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetTeam() *TeamFilter { return v.Team }

// GetIssues returns NullableCycleFilter.Issues, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetNull returns NullableCycleFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableCycleFilter.And, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetAnd() []*NullableCycleFilter { return v.And }

// GetOr returns NullableCycleFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableCycleFilter) GetOr() []*NullableCycleFilter { return v.Or }

// Comparator for optional dates.
type NullableDateComparator struct {
	// Equals constraint.
	Eq time.Time `json:"eq"`
	// Not-equals constraint.
	Neq time.Time `json:"neq"`
	// In-array constraint.
	In []time.Time `json:"in"`
	// Not-in-array constraint.
	Nin []time.Time `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt time.Time `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte time.Time `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt time.Time `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte time.Time `json:"gte"`
}

// GetEq returns NullableDateComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetEq() time.Time { return v.Eq }

// GetNeq returns NullableDateComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNeq() time.Time { return v.Neq }

// GetIn returns NullableDateComparator.In, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetIn() []time.Time { return v.In }

// GetNin returns NullableDateComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNin() []time.Time { return v.Nin }

// GetNull returns NullableDateComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetNull() bool { return v.Null }

// GetLt returns NullableDateComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetLt() time.Time { return v.Lt }

// GetLte returns NullableDateComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetLte() time.Time { return v.Lte }

// GetGt returns NullableDateComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetGt() time.Time { return v.Gt }

// GetGte returns NullableDateComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableDateComparator) GetGte() time.Time { return v.Gte }

// Issue filtering options.
type NullableIssueFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the issues number.
	Number *NumberComparator `json:"number,omitempty"`
	// Comparator for the issues title.
	Title *StringComparator `json:"title,omitempty"`
	// Comparator for the issues description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Comparator for the issues priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// Comparator for the issues estimate.
	Estimate *EstimateComparator `json:"estimate,omitempty"`
	// Comparator for the issues started at date.
	StartedAt *NullableDateComparator `json:"startedAt,omitempty"`
	// Comparator for the issues triaged at date.
	TriagedAt *NullableDateComparator `json:"triagedAt,omitempty"`
	// Comparator for the issues completed at date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the issues canceled at date.
	CanceledAt *NullableDateComparator `json:"canceledAt,omitempty"`
	// Comparator for the issues auto closed at date.
	AutoClosedAt *NullableDateComparator `json:"autoClosedAt,omitempty"`
	// Comparator for the issues auto archived at date.
	AutoArchivedAt *NullableDateComparator `json:"autoArchivedAt,omitempty"`
	// Comparator for the issues due date.
	DueDate *NullableTimelessDateComparator `json:"dueDate,omitempty"`
	// Comparator for the issues snoozed until date.
	SnoozedUntilAt *NullableDateComparator `json:"snoozedUntilAt,omitempty"`
	// Filters that the issues assignee must satisfy.
	Assignee *NullableUserFilter `json:"assignee,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the source must satisfy.
	SourceMetadata *SourceMetadataComparator `json:"sourceMetadata,omitempty"`
	// Filters that the issues creator must satisfy.
	Creator *NullableUserFilter `json:"creator,omitempty"`
	// Filters that the issue parent must satisfy.
	Parent *NullableIssueFilter `json:"parent,omitempty"`
	// Filters that the issues snoozer must satisfy.
	SnoozedBy *NullableUserFilter `json:"snoozedBy,omitempty"`
	// Filters that issue labels must satisfy.
	Labels *IssueLabelCollectionFilter `json:"labels,omitempty"`
	// Filters that issue subscribers must satisfy.
	Subscribers *UserCollectionFilter `json:"subscribers,omitempty"`
	// Filters that the issues team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Filters that the issues project milestone must satisfy.
	ProjectMilestone *NullableProjectMilestoneFilter `json:"projectMilestone,omitempty"`
	// Filters that the issues comments must satisfy.
	Comments *CommentCollectionFilter `json:"comments,omitempty"`
	// Filters that the issues cycle must satisfy.
	Cycle *NullableCycleFilter `json:"cycle,omitempty"`
	// Filters that the issues project must satisfy.
	Project *NullableProjectFilter `json:"project,omitempty"`
	// Filters that the issues state must satisfy.
	State *WorkflowStateFilter `json:"state,omitempty"`
	// Filters that the child issues must satisfy.
	Children *IssueCollectionFilter `json:"children,omitempty"`
	// Filters that the issues attachments must satisfy.
	Attachments *AttachmentCollectionFilter `json:"attachments,omitempty"`
	// [Internal] Comparator for the issues content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for filtering issues with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// Comparator for filtering issues which are duplicates.
	HasDuplicateRelations *RelationExistsComparator `json:"hasDuplicateRelations,omitempty"`
	// Comparator for filtering issues which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering issues which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for the issues sla status.
	SlaStatus *SlaStatusComparator `json:"slaStatus,omitempty"`
	// Filters that the issues reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Filters that the issue's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the issue.
	And []*NullableIssueFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the issue.
	Or []*NullableIssueFilter `json:"or,omitempty"`
}

// GetId returns NullableIssueFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableIssueFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableIssueFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetNumber returns NullableIssueFilter.Number, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetNumber() *NumberComparator { return v.Number }

// GetTitle returns NullableIssueFilter.Title, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTitle() *StringComparator { return v.Title }

// GetDescription returns NullableIssueFilter.Description, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetPriority returns NullableIssueFilter.Priority, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetEstimate returns NullableIssueFilter.Estimate, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetEstimate() *EstimateComparator { return v.Estimate }

// GetStartedAt returns NullableIssueFilter.StartedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetStartedAt() *NullableDateComparator { return v.StartedAt }

// GetTriagedAt returns NullableIssueFilter.TriagedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTriagedAt() *NullableDateComparator { return v.TriagedAt }

// GetCompletedAt returns NullableIssueFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetCanceledAt returns NullableIssueFilter.CanceledAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCanceledAt() *NullableDateComparator { return v.CanceledAt }

// GetAutoClosedAt returns NullableIssueFilter.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAutoClosedAt() *NullableDateComparator { return v.AutoClosedAt }

// GetAutoArchivedAt returns NullableIssueFilter.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAutoArchivedAt() *NullableDateComparator { return v.AutoArchivedAt }

// GetDueDate returns NullableIssueFilter.DueDate, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetDueDate() *NullableTimelessDateComparator { return v.DueDate }

// GetSnoozedUntilAt returns NullableIssueFilter.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSnoozedUntilAt() *NullableDateComparator { return v.SnoozedUntilAt }

// GetAssignee returns NullableIssueFilter.Assignee, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAssignee() *NullableUserFilter { return v.Assignee }

// GetLastAppliedTemplate returns NullableIssueFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetLastAppliedTemplate() *NullableTemplateFilter {
	return v.LastAppliedTemplate
}

// GetSourceMetadata returns NullableIssueFilter.SourceMetadata, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSourceMetadata() *SourceMetadataComparator { return v.SourceMetadata }

// GetCreator returns NullableIssueFilter.Creator, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCreator() *NullableUserFilter { return v.Creator }

// GetParent returns NullableIssueFilter.Parent, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetParent() *NullableIssueFilter { return v.Parent }

// GetSnoozedBy returns NullableIssueFilter.SnoozedBy, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSnoozedBy() *NullableUserFilter { return v.SnoozedBy }

// GetLabels returns NullableIssueFilter.Labels, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetLabels() *IssueLabelCollectionFilter { return v.Labels }

// GetSubscribers returns NullableIssueFilter.Subscribers, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSubscribers() *UserCollectionFilter { return v.Subscribers }

// GetTeam returns NullableIssueFilter.Team, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetTeam() *TeamFilter { return v.Team }

// GetProjectMilestone returns NullableIssueFilter.ProjectMilestone, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetProjectMilestone() *NullableProjectMilestoneFilter {
	return v.ProjectMilestone
}

// GetComments returns NullableIssueFilter.Comments, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetComments() *CommentCollectionFilter { return v.Comments }

// GetCycle returns NullableIssueFilter.Cycle, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetCycle() *NullableCycleFilter { return v.Cycle }

// GetProject returns NullableIssueFilter.Project, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetProject() *NullableProjectFilter { return v.Project }

// GetState returns NullableIssueFilter.State, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetState() *WorkflowStateFilter { return v.State }

// GetChildren returns NullableIssueFilter.Children, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetChildren() *IssueCollectionFilter { return v.Children }

// GetAttachments returns NullableIssueFilter.Attachments, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAttachments() *AttachmentCollectionFilter { return v.Attachments }

// GetSearchableContent returns NullableIssueFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetHasRelatedRelations returns NullableIssueFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDuplicateRelations returns NullableIssueFilter.HasDuplicateRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasDuplicateRelations() *RelationExistsComparator {
	return v.HasDuplicateRelations
}

// GetHasBlockedByRelations returns NullableIssueFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns NullableIssueFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetSlaStatus returns NullableIssueFilter.SlaStatus, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetSlaStatus() *SlaStatusComparator { return v.SlaStatus }

// GetReactions returns NullableIssueFilter.Reactions, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetNeeds returns NullableIssueFilter.Needs, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetNull returns NullableIssueFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableIssueFilter.And, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetAnd() []*NullableIssueFilter { return v.And }

// GetOr returns NullableIssueFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableIssueFilter) GetOr() []*NullableIssueFilter { return v.Or }

// Comparator for optional numbers.
type NullableNumberComparator struct {
	// Equals constraint.
	Eq float64 `json:"eq"`
	// Not-equals constraint.
	Neq float64 `json:"neq"`
	// In-array constraint.
	In []float64 `json:"in"`
	// Not-in-array constraint.
	Nin []float64 `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt float64 `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte float64 `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt float64 `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte float64 `json:"gte"`
}

// GetEq returns NullableNumberComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetEq() float64 { return v.Eq }

// GetNeq returns NullableNumberComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNeq() float64 { return v.Neq }

// GetIn returns NullableNumberComparator.In, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetIn() []float64 { return v.In }

// GetNin returns NullableNumberComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNin() []float64 { return v.Nin }

// GetNull returns NullableNumberComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetNull() bool { return v.Null }

// GetLt returns NullableNumberComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetLt() float64 { return v.Lt }

// GetLte returns NullableNumberComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetLte() float64 { return v.Lte }

// GetGt returns NullableNumberComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetGt() float64 { return v.Gt }

// GetGte returns NullableNumberComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableNumberComparator) GetGte() float64 { return v.Gte }

// Project filtering options.
type NullableProjectFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// [DEPRECATED] Comparator for the project state.
	State *StringComparator `json:"state,omitempty"`
	// Filters that the project's status must satisfy.
	Status *ProjectStatusFilter `json:"status,omitempty"`
	// [ALPHA] Comparator for the projects priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// [Internal] Comparator for the project's content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the project completion date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the project start date.
	StartDate *NullableDateComparator `json:"startDate,omitempty"`
	// Comparator for the project target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Comparator for the project health.
	Health *StringComparator `json:"health,omitempty"`
	// Comparator for the project health (with age).
	HealthWithAge *StringComparator `json:"healthWithAge,omitempty"`
	// Comparator for filtering projects with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// [Deprecated] Comparator for filtering projects which this is depended on by.
	HasDependedOnByRelations *RelationExistsComparator `json:"hasDependedOnByRelations,omitempty"`
	// [Deprecated]Comparator for filtering projects which this depends on.
	HasDependsOnRelations *RelationExistsComparator `json:"hasDependsOnRelations,omitempty"`
	// Comparator for filtering projects which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering projects which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering projects with violated dependencies.
	HasViolatedRelations *RelationExistsComparator `json:"hasViolatedRelations,omitempty"`
	// Comparator for the project updates.
	ProjectUpdates *ProjectUpdatesCollectionFilter `json:"projectUpdates,omitempty"`
	// Filters that the projects creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Filters that the projects lead must satisfy.
	Lead *NullableUserFilter `json:"lead,omitempty"`
	// Filters that the projects members must satisfy.
	Members *UserCollectionFilter `json:"members,omitempty"`
	// Filters that the projects issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filters that the projects roadmaps must satisfy.
	Roadmaps *RoadmapCollectionFilter `json:"roadmaps,omitempty"`
	// Filters that the projects initiatives must satisfy.
	Initiatives *InitiativeCollectionFilter `json:"initiatives,omitempty"`
	// Filters that the project's milestones must satisfy.
	ProjectMilestones *ProjectMilestoneCollectionFilter `json:"projectMilestones,omitempty"`
	// Filters that the project's completed milestones must satisfy.
	CompletedProjectMilestones *ProjectMilestoneCollectionFilter `json:"completedProjectMilestones,omitempty"`
	// Filters that the project's next milestone must satisfy.
	NextProjectMilestone *ProjectMilestoneFilter `json:"nextProjectMilestone,omitempty"`
	// Filters that the project's team must satisfy.
	AccessibleTeams *TeamCollectionFilter `json:"accessibleTeams,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the project's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the project.
	And []*NullableProjectFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project.
	Or []*NullableProjectFilter `json:"or,omitempty"`
}

// GetId returns NullableProjectFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableProjectFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableProjectFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns NullableProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns NullableProjectFilter.SlugId, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetState returns NullableProjectFilter.State, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetState() *StringComparator { return v.State }

// GetStatus returns NullableProjectFilter.Status, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetStatus() *ProjectStatusFilter { return v.Status }

// GetPriority returns NullableProjectFilter.Priority, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetSearchableContent returns NullableProjectFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetCompletedAt returns NullableProjectFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetStartDate returns NullableProjectFilter.StartDate, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetStartDate() *NullableDateComparator { return v.StartDate }

// GetTargetDate returns NullableProjectFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetHealth returns NullableProjectFilter.Health, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHealth() *StringComparator { return v.Health }

// GetHealthWithAge returns NullableProjectFilter.HealthWithAge, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHealthWithAge() *StringComparator { return v.HealthWithAge }

// GetHasRelatedRelations returns NullableProjectFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDependedOnByRelations returns NullableProjectFilter.HasDependedOnByRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasDependedOnByRelations() *RelationExistsComparator {
	return v.HasDependedOnByRelations
}

// GetHasDependsOnRelations returns NullableProjectFilter.HasDependsOnRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasDependsOnRelations() *RelationExistsComparator {
	return v.HasDependsOnRelations
}

// GetHasBlockedByRelations returns NullableProjectFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns NullableProjectFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasViolatedRelations returns NullableProjectFilter.HasViolatedRelations, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetHasViolatedRelations() *RelationExistsComparator {
	return v.HasViolatedRelations
}

// GetProjectUpdates returns NullableProjectFilter.ProjectUpdates, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetProjectUpdates() *ProjectUpdatesCollectionFilter {
	return v.ProjectUpdates
}

// GetCreator returns NullableProjectFilter.Creator, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCreator() *UserFilter { return v.Creator }

// GetLead returns NullableProjectFilter.Lead, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetLead() *NullableUserFilter { return v.Lead }

// GetMembers returns NullableProjectFilter.Members, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetMembers() *UserCollectionFilter { return v.Members }

// GetIssues returns NullableProjectFilter.Issues, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetRoadmaps returns NullableProjectFilter.Roadmaps, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetRoadmaps() *RoadmapCollectionFilter { return v.Roadmaps }

// GetInitiatives returns NullableProjectFilter.Initiatives, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetInitiatives() *InitiativeCollectionFilter { return v.Initiatives }

// GetProjectMilestones returns NullableProjectFilter.ProjectMilestones, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.ProjectMilestones
}

// GetCompletedProjectMilestones returns NullableProjectFilter.CompletedProjectMilestones, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetCompletedProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.CompletedProjectMilestones
}

// GetNextProjectMilestone returns NullableProjectFilter.NextProjectMilestone, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetNextProjectMilestone() *ProjectMilestoneFilter {
	return v.NextProjectMilestone
}

// GetAccessibleTeams returns NullableProjectFilter.AccessibleTeams, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetAccessibleTeams() *TeamCollectionFilter { return v.AccessibleTeams }

// GetLastAppliedTemplate returns NullableProjectFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetLastAppliedTemplate() *NullableTemplateFilter {
	return v.LastAppliedTemplate
}

// GetNeeds returns NullableProjectFilter.Needs, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetNull returns NullableProjectFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableProjectFilter.And, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetAnd() []*NullableProjectFilter { return v.And }

// GetOr returns NullableProjectFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableProjectFilter) GetOr() []*NullableProjectFilter { return v.Or }

// Project milestone filtering options.
type NullableProjectMilestoneFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project milestone name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project milestone target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the project milestone.
	And []*NullableProjectMilestoneFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project milestone.
	Or []*NullableProjectMilestoneFilter `json:"or,omitempty"`
}

// GetId returns NullableProjectMilestoneFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableProjectMilestoneFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableProjectMilestoneFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns NullableProjectMilestoneFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetName() *StringComparator { return v.Name }

// GetTargetDate returns NullableProjectMilestoneFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetNull returns NullableProjectMilestoneFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableProjectMilestoneFilter.And, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetAnd() []*NullableProjectMilestoneFilter { return v.And }

// GetOr returns NullableProjectMilestoneFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableProjectMilestoneFilter) GetOr() []*NullableProjectMilestoneFilter { return v.Or }

// Comparator for optional strings.
type NullableStringComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase string `json:"eqIgnoreCase"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase string `json:"neqIgnoreCase"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith string `json:"startsWith"`
	// Starts with case insensitive constraint. Matches any values that start with the given string.
	StartsWithIgnoreCase string `json:"startsWithIgnoreCase"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith string `json:"notStartsWith"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith string `json:"endsWith"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith string `json:"notEndsWith"`
	// Contains constraint. Matches any values that contain the given string.
	Contains string `json:"contains"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase string `json:"containsIgnoreCase"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains string `json:"notContains"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase string `json:"notContainsIgnoreCase"`
}

// GetEq returns NullableStringComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEq() string { return v.Eq }

// GetNeq returns NullableStringComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNeq() string { return v.Neq }

// GetIn returns NullableStringComparator.In, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetIn() []string { return v.In }

// GetNin returns NullableStringComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNin() []string { return v.Nin }

// GetNull returns NullableStringComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNull() bool { return v.Null }

// GetEqIgnoreCase returns NullableStringComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEqIgnoreCase() string { return v.EqIgnoreCase }

// GetNeqIgnoreCase returns NullableStringComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNeqIgnoreCase() string { return v.NeqIgnoreCase }

// GetStartsWith returns NullableStringComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetStartsWith() string { return v.StartsWith }

// GetStartsWithIgnoreCase returns NullableStringComparator.StartsWithIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetStartsWithIgnoreCase() string { return v.StartsWithIgnoreCase }

// GetNotStartsWith returns NullableStringComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotStartsWith() string { return v.NotStartsWith }

// GetEndsWith returns NullableStringComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetEndsWith() string { return v.EndsWith }

// GetNotEndsWith returns NullableStringComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotEndsWith() string { return v.NotEndsWith }

// GetContains returns NullableStringComparator.Contains, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetContains() string { return v.Contains }

// GetContainsIgnoreCase returns NullableStringComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetContainsIgnoreCase() string { return v.ContainsIgnoreCase }

// GetNotContains returns NullableStringComparator.NotContains, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotContains() string { return v.NotContains }

// GetNotContainsIgnoreCase returns NullableStringComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *NullableStringComparator) GetNotContainsIgnoreCase() string { return v.NotContainsIgnoreCase }

// Team filtering options.
type NullableTeamFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the team name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the team key.
	Key *StringComparator `json:"key,omitempty"`
	// Comparator for the team description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Filters that the teams issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the team.
	And []*NullableTeamFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the team.
	Or []*NullableTeamFilter `json:"or,omitempty"`
}

// GetId returns NullableTeamFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableTeamFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableTeamFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns NullableTeamFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetName() *StringComparator { return v.Name }

// GetKey returns NullableTeamFilter.Key, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetKey() *StringComparator { return v.Key }

// GetDescription returns NullableTeamFilter.Description, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetIssues returns NullableTeamFilter.Issues, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetNull returns NullableTeamFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableTeamFilter.And, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetAnd() []*NullableTeamFilter { return v.And }

// GetOr returns NullableTeamFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableTeamFilter) GetOr() []*NullableTeamFilter { return v.Or }

// Template filtering options.
type NullableTemplateFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the template's name.
	Name *StringComparator `json:"name,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the template.
	And []*NullableTemplateFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the template.
	Or []*NullableTemplateFilter `json:"or,omitempty"`
}

// GetId returns NullableTemplateFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableTemplateFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableTemplateFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns NullableTemplateFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetName() *StringComparator { return v.Name }

// GetNull returns NullableTemplateFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableTemplateFilter.And, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetAnd() []*NullableTemplateFilter { return v.And }

// GetOr returns NullableTemplateFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableTemplateFilter) GetOr() []*NullableTemplateFilter { return v.Or }

// Comparator for optional timeless dates.
type NullableTimelessDateComparator struct {
	// Equals constraint.
	Eq time.Time `json:"eq"`
	// Not-equals constraint.
	Neq time.Time `json:"neq"`
	// In-array constraint.
	In []time.Time `json:"in"`
	// Not-in-array constraint.
	Nin []time.Time `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt time.Time `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte time.Time `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt time.Time `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte time.Time `json:"gte"`
}

// GetEq returns NullableTimelessDateComparator.Eq, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetEq() time.Time { return v.Eq }

// GetNeq returns NullableTimelessDateComparator.Neq, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNeq() time.Time { return v.Neq }

// GetIn returns NullableTimelessDateComparator.In, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetIn() []time.Time { return v.In }

// GetNin returns NullableTimelessDateComparator.Nin, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNin() []time.Time { return v.Nin }

// GetNull returns NullableTimelessDateComparator.Null, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetNull() bool { return v.Null }

// GetLt returns NullableTimelessDateComparator.Lt, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetLt() time.Time { return v.Lt }

// GetLte returns NullableTimelessDateComparator.Lte, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetLte() time.Time { return v.Lte }

// GetGt returns NullableTimelessDateComparator.Gt, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetGt() time.Time { return v.Gt }

// GetGte returns NullableTimelessDateComparator.Gte, and is useful for accessing the field via an interface.
func (v *NullableTimelessDateComparator) GetGte() time.Time { return v.Gte }

// User filtering options.
type NullableUserFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Filter based on the existence of the relation.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the user.
	And []*NullableUserFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*NullableUserFilter `json:"or,omitempty"`
}

// GetId returns NullableUserFilter.Id, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns NullableUserFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns NullableUserFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns NullableUserFilter.Name, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetName() *StringComparator { return v.Name }

// GetDisplayName returns NullableUserFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns NullableUserFilter.Email, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetEmail() *StringComparator { return v.Email }

// GetActive returns NullableUserFilter.Active, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetActive() *BooleanComparator { return v.Active }

// GetAssignedIssues returns NullableUserFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetAdmin returns NullableUserFilter.Admin, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetIsMe returns NullableUserFilter.IsMe, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetNull returns NullableUserFilter.Null, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetNull() bool { return v.Null }

// GetAnd returns NullableUserFilter.And, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetAnd() []*NullableUserFilter { return v.And }

// GetOr returns NullableUserFilter.Or, and is useful for accessing the field via an interface.
func (v *NullableUserFilter) GetOr() []*NullableUserFilter { return v.Or }

// Comparator for numbers.
type NumberComparator struct {
	// Equals constraint.
	Eq float64 `json:"eq"`
	// Not-equals constraint.
	Neq float64 `json:"neq"`
	// In-array constraint.
	In []float64 `json:"in"`
	// Not-in-array constraint.
	Nin []float64 `json:"nin"`
	// Less-than constraint. Matches any values that are less than the given value.
	Lt float64 `json:"lt"`
	// Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
	Lte float64 `json:"lte"`
	// Greater-than constraint. Matches any values that are greater than the given value.
	Gt float64 `json:"gt"`
	// Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
	Gte float64 `json:"gte"`
}

// GetEq returns NumberComparator.Eq, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetEq() float64 { return v.Eq }

// GetNeq returns NumberComparator.Neq, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetNeq() float64 { return v.Neq }

// GetIn returns NumberComparator.In, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetIn() []float64 { return v.In }

// GetNin returns NumberComparator.Nin, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetNin() []float64 { return v.Nin }

// GetLt returns NumberComparator.Lt, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetLt() float64 { return v.Lt }

// GetLte returns NumberComparator.Lte, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetLte() float64 { return v.Lte }

// GetGt returns NumberComparator.Gt, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetGt() float64 { return v.Gt }

// GetGte returns NumberComparator.Gte, and is useful for accessing the field via an interface.
func (v *NumberComparator) GetGte() float64 { return v.Gte }

// Project filtering options.
type ProjectCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// [DEPRECATED] Comparator for the project state.
	State *StringComparator `json:"state,omitempty"`
	// Filters that the project's status must satisfy.
	Status *ProjectStatusFilter `json:"status,omitempty"`
	// [ALPHA] Comparator for the projects priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// [Internal] Comparator for the project's content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the project completion date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the project start date.
	StartDate *NullableDateComparator `json:"startDate,omitempty"`
	// Comparator for the project target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Comparator for the project health.
	Health *StringComparator `json:"health,omitempty"`
	// Comparator for the project health (with age).
	HealthWithAge *StringComparator `json:"healthWithAge,omitempty"`
	// Comparator for filtering projects with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// [Deprecated] Comparator for filtering projects which this is depended on by.
	HasDependedOnByRelations *RelationExistsComparator `json:"hasDependedOnByRelations,omitempty"`
	// [Deprecated]Comparator for filtering projects which this depends on.
	HasDependsOnRelations *RelationExistsComparator `json:"hasDependsOnRelations,omitempty"`
	// Comparator for filtering projects which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering projects which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering projects with violated dependencies.
	HasViolatedRelations *RelationExistsComparator `json:"hasViolatedRelations,omitempty"`
	// Comparator for the project updates.
	ProjectUpdates *ProjectUpdatesCollectionFilter `json:"projectUpdates,omitempty"`
	// Filters that the projects creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Filters that the projects lead must satisfy.
	Lead *NullableUserFilter `json:"lead,omitempty"`
	// Filters that the projects members must satisfy.
	Members *UserCollectionFilter `json:"members,omitempty"`
	// Filters that the projects issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filters that the projects roadmaps must satisfy.
	Roadmaps *RoadmapCollectionFilter `json:"roadmaps,omitempty"`
	// Filters that the projects initiatives must satisfy.
	Initiatives *InitiativeCollectionFilter `json:"initiatives,omitempty"`
	// Filters that the project's milestones must satisfy.
	ProjectMilestones *ProjectMilestoneCollectionFilter `json:"projectMilestones,omitempty"`
	// Filters that the project's completed milestones must satisfy.
	CompletedProjectMilestones *ProjectMilestoneCollectionFilter `json:"completedProjectMilestones,omitempty"`
	// Filters that the project's next milestone must satisfy.
	NextProjectMilestone *ProjectMilestoneFilter `json:"nextProjectMilestone,omitempty"`
	// Filters that the project's team must satisfy.
	AccessibleTeams *TeamCollectionFilter `json:"accessibleTeams,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the project's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the project.
	And []*ProjectCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project.
	Or []*ProjectCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some projects.
	Some *ProjectFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all projects.
	Every *ProjectFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns ProjectCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns ProjectCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns ProjectCollectionFilter.SlugId, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetState returns ProjectCollectionFilter.State, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetState() *StringComparator { return v.State }

// GetStatus returns ProjectCollectionFilter.Status, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetStatus() *ProjectStatusFilter { return v.Status }

// GetPriority returns ProjectCollectionFilter.Priority, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetSearchableContent returns ProjectCollectionFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetSearchableContent() *ContentComparator {
	return v.SearchableContent
}

// GetCompletedAt returns ProjectCollectionFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetStartDate returns ProjectCollectionFilter.StartDate, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetStartDate() *NullableDateComparator { return v.StartDate }

// GetTargetDate returns ProjectCollectionFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetHealth returns ProjectCollectionFilter.Health, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHealth() *StringComparator { return v.Health }

// GetHealthWithAge returns ProjectCollectionFilter.HealthWithAge, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHealthWithAge() *StringComparator { return v.HealthWithAge }

// GetHasRelatedRelations returns ProjectCollectionFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDependedOnByRelations returns ProjectCollectionFilter.HasDependedOnByRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasDependedOnByRelations() *RelationExistsComparator {
	return v.HasDependedOnByRelations
}

// GetHasDependsOnRelations returns ProjectCollectionFilter.HasDependsOnRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasDependsOnRelations() *RelationExistsComparator {
	return v.HasDependsOnRelations
}

// GetHasBlockedByRelations returns ProjectCollectionFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns ProjectCollectionFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasViolatedRelations returns ProjectCollectionFilter.HasViolatedRelations, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetHasViolatedRelations() *RelationExistsComparator {
	return v.HasViolatedRelations
}

// GetProjectUpdates returns ProjectCollectionFilter.ProjectUpdates, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetProjectUpdates() *ProjectUpdatesCollectionFilter {
	return v.ProjectUpdates
}

// GetCreator returns ProjectCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetCreator() *UserFilter { return v.Creator }

// GetLead returns ProjectCollectionFilter.Lead, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetLead() *NullableUserFilter { return v.Lead }

// GetMembers returns ProjectCollectionFilter.Members, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetMembers() *UserCollectionFilter { return v.Members }

// GetIssues returns ProjectCollectionFilter.Issues, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetRoadmaps returns ProjectCollectionFilter.Roadmaps, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetRoadmaps() *RoadmapCollectionFilter { return v.Roadmaps }

// GetInitiatives returns ProjectCollectionFilter.Initiatives, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetInitiatives() *InitiativeCollectionFilter { return v.Initiatives }

// GetProjectMilestones returns ProjectCollectionFilter.ProjectMilestones, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.ProjectMilestones
}

// GetCompletedProjectMilestones returns ProjectCollectionFilter.CompletedProjectMilestones, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetCompletedProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.CompletedProjectMilestones
}

// GetNextProjectMilestone returns ProjectCollectionFilter.NextProjectMilestone, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetNextProjectMilestone() *ProjectMilestoneFilter {
	return v.NextProjectMilestone
}

// GetAccessibleTeams returns ProjectCollectionFilter.AccessibleTeams, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetAccessibleTeams() *TeamCollectionFilter {
	return v.AccessibleTeams
}

// GetLastAppliedTemplate returns ProjectCollectionFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetLastAppliedTemplate() *NullableTemplateFilter {
	return v.LastAppliedTemplate
}

// GetNeeds returns ProjectCollectionFilter.Needs, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns ProjectCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetAnd() []*ProjectCollectionFilter { return v.And }

// GetOr returns ProjectCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetOr() []*ProjectCollectionFilter { return v.Or }

// GetSome returns ProjectCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetSome() *ProjectFilter { return v.Some }

// GetEvery returns ProjectCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetEvery() *ProjectFilter { return v.Every }

// GetLength returns ProjectCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *ProjectCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Project filtering options.
type ProjectFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// [DEPRECATED] Comparator for the project state.
	State *StringComparator `json:"state,omitempty"`
	// Filters that the project's status must satisfy.
	Status *ProjectStatusFilter `json:"status,omitempty"`
	// [ALPHA] Comparator for the projects priority.
	Priority *NullableNumberComparator `json:"priority,omitempty"`
	// [Internal] Comparator for the project's content.
	SearchableContent *ContentComparator `json:"searchableContent,omitempty"`
	// Comparator for the project completion date.
	CompletedAt *NullableDateComparator `json:"completedAt,omitempty"`
	// Comparator for the project start date.
	StartDate *NullableDateComparator `json:"startDate,omitempty"`
	// Comparator for the project target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Comparator for the project health.
	Health *StringComparator `json:"health,omitempty"`
	// Comparator for the project health (with age).
	HealthWithAge *StringComparator `json:"healthWithAge,omitempty"`
	// Comparator for filtering projects with relations.
	HasRelatedRelations *RelationExistsComparator `json:"hasRelatedRelations,omitempty"`
	// [Deprecated] Comparator for filtering projects which this is depended on by.
	HasDependedOnByRelations *RelationExistsComparator `json:"hasDependedOnByRelations,omitempty"`
	// [Deprecated]Comparator for filtering projects which this depends on.
	HasDependsOnRelations *RelationExistsComparator `json:"hasDependsOnRelations,omitempty"`
	// Comparator for filtering projects which are blocked.
	HasBlockedByRelations *RelationExistsComparator `json:"hasBlockedByRelations,omitempty"`
	// Comparator for filtering projects which are blocking.
	HasBlockingRelations *RelationExistsComparator `json:"hasBlockingRelations,omitempty"`
	// Comparator for filtering projects with violated dependencies.
	HasViolatedRelations *RelationExistsComparator `json:"hasViolatedRelations,omitempty"`
	// Comparator for the project updates.
	ProjectUpdates *ProjectUpdatesCollectionFilter `json:"projectUpdates,omitempty"`
	// Filters that the projects creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Filters that the projects lead must satisfy.
	Lead *NullableUserFilter `json:"lead,omitempty"`
	// Filters that the projects members must satisfy.
	Members *UserCollectionFilter `json:"members,omitempty"`
	// Filters that the projects issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Filters that the projects roadmaps must satisfy.
	Roadmaps *RoadmapCollectionFilter `json:"roadmaps,omitempty"`
	// Filters that the projects initiatives must satisfy.
	Initiatives *InitiativeCollectionFilter `json:"initiatives,omitempty"`
	// Filters that the project's milestones must satisfy.
	ProjectMilestones *ProjectMilestoneCollectionFilter `json:"projectMilestones,omitempty"`
	// Filters that the project's completed milestones must satisfy.
	CompletedProjectMilestones *ProjectMilestoneCollectionFilter `json:"completedProjectMilestones,omitempty"`
	// Filters that the project's next milestone must satisfy.
	NextProjectMilestone *ProjectMilestoneFilter `json:"nextProjectMilestone,omitempty"`
	// Filters that the project's team must satisfy.
	AccessibleTeams *TeamCollectionFilter `json:"accessibleTeams,omitempty"`
	// Filters that the last applied template must satisfy.
	LastAppliedTemplate *NullableTemplateFilter `json:"lastAppliedTemplate,omitempty"`
	// Filters that the project's customer needs must satisfy.
	Needs *CustomerNeedCollectionFilter `json:"needs,omitempty"`
	// Compound filters, all of which need to be matched by the project.
	And []*ProjectFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project.
	Or []*ProjectFilter `json:"or,omitempty"`
}

// GetId returns ProjectFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns ProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns ProjectFilter.SlugId, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetState returns ProjectFilter.State, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetState() *StringComparator { return v.State }

// GetStatus returns ProjectFilter.Status, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetStatus() *ProjectStatusFilter { return v.Status }

// GetPriority returns ProjectFilter.Priority, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetPriority() *NullableNumberComparator { return v.Priority }

// GetSearchableContent returns ProjectFilter.SearchableContent, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetSearchableContent() *ContentComparator { return v.SearchableContent }

// GetCompletedAt returns ProjectFilter.CompletedAt, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCompletedAt() *NullableDateComparator { return v.CompletedAt }

// GetStartDate returns ProjectFilter.StartDate, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetStartDate() *NullableDateComparator { return v.StartDate }

// GetTargetDate returns ProjectFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetHealth returns ProjectFilter.Health, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHealth() *StringComparator { return v.Health }

// GetHealthWithAge returns ProjectFilter.HealthWithAge, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHealthWithAge() *StringComparator { return v.HealthWithAge }

// GetHasRelatedRelations returns ProjectFilter.HasRelatedRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasRelatedRelations() *RelationExistsComparator {
	return v.HasRelatedRelations
}

// GetHasDependedOnByRelations returns ProjectFilter.HasDependedOnByRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasDependedOnByRelations() *RelationExistsComparator {
	return v.HasDependedOnByRelations
}

// GetHasDependsOnRelations returns ProjectFilter.HasDependsOnRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasDependsOnRelations() *RelationExistsComparator {
	return v.HasDependsOnRelations
}

// GetHasBlockedByRelations returns ProjectFilter.HasBlockedByRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasBlockedByRelations() *RelationExistsComparator {
	return v.HasBlockedByRelations
}

// GetHasBlockingRelations returns ProjectFilter.HasBlockingRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasBlockingRelations() *RelationExistsComparator {
	return v.HasBlockingRelations
}

// GetHasViolatedRelations returns ProjectFilter.HasViolatedRelations, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetHasViolatedRelations() *RelationExistsComparator {
	return v.HasViolatedRelations
}

// GetProjectUpdates returns ProjectFilter.ProjectUpdates, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetProjectUpdates() *ProjectUpdatesCollectionFilter { return v.ProjectUpdates }

// GetCreator returns ProjectFilter.Creator, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCreator() *UserFilter { return v.Creator }

// GetLead returns ProjectFilter.Lead, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetLead() *NullableUserFilter { return v.Lead }

// GetMembers returns ProjectFilter.Members, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetMembers() *UserCollectionFilter { return v.Members }

// GetIssues returns ProjectFilter.Issues, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetRoadmaps returns ProjectFilter.Roadmaps, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetRoadmaps() *RoadmapCollectionFilter { return v.Roadmaps }

// GetInitiatives returns ProjectFilter.Initiatives, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetInitiatives() *InitiativeCollectionFilter { return v.Initiatives }

// GetProjectMilestones returns ProjectFilter.ProjectMilestones, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.ProjectMilestones
}

// GetCompletedProjectMilestones returns ProjectFilter.CompletedProjectMilestones, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetCompletedProjectMilestones() *ProjectMilestoneCollectionFilter {
	return v.CompletedProjectMilestones
}

// GetNextProjectMilestone returns ProjectFilter.NextProjectMilestone, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetNextProjectMilestone() *ProjectMilestoneFilter {
	return v.NextProjectMilestone
}

// GetAccessibleTeams returns ProjectFilter.AccessibleTeams, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetAccessibleTeams() *TeamCollectionFilter { return v.AccessibleTeams }

// GetLastAppliedTemplate returns ProjectFilter.LastAppliedTemplate, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetLastAppliedTemplate() *NullableTemplateFilter {
	return v.LastAppliedTemplate
}

// GetNeeds returns ProjectFilter.Needs, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetNeeds() *CustomerNeedCollectionFilter { return v.Needs }

// GetAnd returns ProjectFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetAnd() []*ProjectFilter { return v.And }

// GetOr returns ProjectFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetOr() []*ProjectFilter { return v.Or }

// Milestone collection filtering options.
type ProjectMilestoneCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project milestone name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project milestone target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Compound filters, all of which need to be matched by the milestone.
	And []*ProjectMilestoneCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the milestone.
	Or []*ProjectMilestoneCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some milestones.
	Some *ProjectMilestoneFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all milestones.
	Every *ProjectMilestoneFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns ProjectMilestoneCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectMilestoneCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectMilestoneCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns ProjectMilestoneCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetName() *StringComparator { return v.Name }

// GetTargetDate returns ProjectMilestoneCollectionFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetTargetDate() *NullableDateComparator {
	return v.TargetDate
}

// GetAnd returns ProjectMilestoneCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetAnd() []*ProjectMilestoneCollectionFilter { return v.And }

// GetOr returns ProjectMilestoneCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetOr() []*ProjectMilestoneCollectionFilter { return v.Or }

// GetSome returns ProjectMilestoneCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetSome() *ProjectMilestoneFilter { return v.Some }

// GetEvery returns ProjectMilestoneCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetEvery() *ProjectMilestoneFilter { return v.Every }

// GetLength returns ProjectMilestoneCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Project milestone filtering options.
type ProjectMilestoneFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project milestone name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project milestone target date.
	TargetDate *NullableDateComparator `json:"targetDate,omitempty"`
	// Compound filters, all of which need to be matched by the project milestone.
	And []*ProjectMilestoneFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project milestone.
	Or []*ProjectMilestoneFilter `json:"or,omitempty"`
}

// GetId returns ProjectMilestoneFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectMilestoneFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectMilestoneFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns ProjectMilestoneFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetName() *StringComparator { return v.Name }

// GetTargetDate returns ProjectMilestoneFilter.TargetDate, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetTargetDate() *NullableDateComparator { return v.TargetDate }

// GetAnd returns ProjectMilestoneFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetAnd() []*ProjectMilestoneFilter { return v.And }

// GetOr returns ProjectMilestoneFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectMilestoneFilter) GetOr() []*ProjectMilestoneFilter { return v.Or }

// Project status filtering options.
type ProjectStatusFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project status name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the project status description.
	Description *StringComparator `json:"description,omitempty"`
	// Comparator for the project status position.
	Position *NumberComparator `json:"position,omitempty"`
	// Comparator for the project status type.
	Type *StringComparator `json:"type,omitempty"`
	// Filters that the project status projects must satisfy.
	Projects *ProjectCollectionFilter `json:"projects,omitempty"`
	// Compound filters, all of which need to be matched by the project status.
	And []*ProjectStatusFilter `json:"and,omitempty"`
	// Compound filters, one of which needs to be matched by the project status.
	Or []*ProjectStatusFilter `json:"or,omitempty"`
}

// GetId returns ProjectStatusFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectStatusFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectStatusFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns ProjectStatusFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetName() *StringComparator { return v.Name }

// GetDescription returns ProjectStatusFilter.Description, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetDescription() *StringComparator { return v.Description }

// GetPosition returns ProjectStatusFilter.Position, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetPosition() *NumberComparator { return v.Position }

// GetType returns ProjectStatusFilter.Type, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetType() *StringComparator { return v.Type }

// GetProjects returns ProjectStatusFilter.Projects, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetProjects() *ProjectCollectionFilter { return v.Projects }

// GetAnd returns ProjectStatusFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetAnd() []*ProjectStatusFilter { return v.And }

// GetOr returns ProjectStatusFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectStatusFilter) GetOr() []*ProjectStatusFilter { return v.Or }

// Options for filtering project updates.
type ProjectUpdateFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Filters that the project update creator must satisfy.
	User *UserFilter `json:"user,omitempty"`
	// Filters that the project update project must satisfy.
	Project *ProjectFilter `json:"project,omitempty"`
	// Filters that the project updates reactions must satisfy.
	Reactions *ReactionCollectionFilter `json:"reactions,omitempty"`
	// Compound filters, all of which need to be matched by the ProjectUpdate.
	And []*ProjectUpdateFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the ProjectUpdate.
	Or []*ProjectUpdateFilter `json:"or,omitempty"`
}

// GetId returns ProjectUpdateFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectUpdateFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectUpdateFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetUser returns ProjectUpdateFilter.User, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetUser() *UserFilter { return v.User }

// GetProject returns ProjectUpdateFilter.Project, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetProject() *ProjectFilter { return v.Project }

// GetReactions returns ProjectUpdateFilter.Reactions, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetReactions() *ReactionCollectionFilter { return v.Reactions }

// GetAnd returns ProjectUpdateFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetAnd() []*ProjectUpdateFilter { return v.And }

// GetOr returns ProjectUpdateFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectUpdateFilter) GetOr() []*ProjectUpdateFilter { return v.Or }

// Collection filtering options for filtering projects by project updates.
type ProjectUpdatesCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project update health.
	Health *StringComparator `json:"health,omitempty"`
	// Compound filters, all of which need to be matched by the project update.
	And []*ProjectUpdatesCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the update.
	Or []*ProjectUpdatesCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some updates.
	Some *ProjectUpdatesFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all updates.
	Every *ProjectUpdatesFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns ProjectUpdatesCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectUpdatesCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectUpdatesCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetHealth returns ProjectUpdatesCollectionFilter.Health, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetHealth() *StringComparator { return v.Health }

// GetAnd returns ProjectUpdatesCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetAnd() []*ProjectUpdatesCollectionFilter { return v.And }

// GetOr returns ProjectUpdatesCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetOr() []*ProjectUpdatesCollectionFilter { return v.Or }

// GetSome returns ProjectUpdatesCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetSome() *ProjectUpdatesFilter { return v.Some }

// GetEvery returns ProjectUpdatesCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetEvery() *ProjectUpdatesFilter { return v.Every }

// GetLength returns ProjectUpdatesCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Options for filtering projects by project updates.
type ProjectUpdatesFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the project update health.
	Health *StringComparator `json:"health,omitempty"`
	// Compound filters, all of which need to be matched by the project updates.
	And []*ProjectUpdatesFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the project updates.
	Or []*ProjectUpdatesFilter `json:"or,omitempty"`
}

// GetId returns ProjectUpdatesFilter.Id, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ProjectUpdatesFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ProjectUpdatesFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetHealth returns ProjectUpdatesFilter.Health, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetHealth() *StringComparator { return v.Health }

// GetAnd returns ProjectUpdatesFilter.And, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetAnd() []*ProjectUpdatesFilter { return v.And }

// GetOr returns ProjectUpdatesFilter.Or, and is useful for accessing the field via an interface.
func (v *ProjectUpdatesFilter) GetOr() []*ProjectUpdatesFilter { return v.Or }

// Reaction filtering options.
type ReactionCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the reactions emoji.
	Emoji *StringComparator `json:"emoji,omitempty"`
	// Comparator for the reactions custom emoji.
	CustomEmojiId *IDComparator `json:"customEmojiId,omitempty"`
	// Compound filters, all of which need to be matched by the reaction.
	And []*ReactionCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the reaction.
	Or []*ReactionCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some reactions.
	Some *ReactionFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all reactions.
	Every *ReactionFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns ReactionCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ReactionCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ReactionCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetEmoji returns ReactionCollectionFilter.Emoji, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetEmoji() *StringComparator { return v.Emoji }

// GetCustomEmojiId returns ReactionCollectionFilter.CustomEmojiId, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetCustomEmojiId() *IDComparator { return v.CustomEmojiId }

// GetAnd returns ReactionCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetAnd() []*ReactionCollectionFilter { return v.And }

// GetOr returns ReactionCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetOr() []*ReactionCollectionFilter { return v.Or }

// GetSome returns ReactionCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetSome() *ReactionFilter { return v.Some }

// GetEvery returns ReactionCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetEvery() *ReactionFilter { return v.Every }

// GetLength returns ReactionCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *ReactionCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Reaction filtering options.
type ReactionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the reactions emoji.
	Emoji *StringComparator `json:"emoji,omitempty"`
	// Comparator for the reactions custom emoji.
	CustomEmojiId *IDComparator `json:"customEmojiId,omitempty"`
	// Compound filters, all of which need to be matched by the reaction.
	And []*ReactionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the reaction.
	Or []*ReactionFilter `json:"or,omitempty"`
}

// GetId returns ReactionFilter.Id, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns ReactionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns ReactionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetEmoji returns ReactionFilter.Emoji, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetEmoji() *StringComparator { return v.Emoji }

// GetCustomEmojiId returns ReactionFilter.CustomEmojiId, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetCustomEmojiId() *IDComparator { return v.CustomEmojiId }

// GetAnd returns ReactionFilter.And, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetAnd() []*ReactionFilter { return v.And }

// GetOr returns ReactionFilter.Or, and is useful for accessing the field via an interface.
func (v *ReactionFilter) GetOr() []*ReactionFilter { return v.Or }

// Comparator for relation existence.
type RelationExistsComparator struct {
	// Equals constraint.
	Eq bool `json:"eq"`
	// Not equals constraint.
	Neq bool `json:"neq"`
}

// GetEq returns RelationExistsComparator.Eq, and is useful for accessing the field via an interface.
func (v *RelationExistsComparator) GetEq() bool { return v.Eq }

// GetNeq returns RelationExistsComparator.Neq, and is useful for accessing the field via an interface.
func (v *RelationExistsComparator) GetNeq() bool { return v.Neq }

// Roadmap collection filtering options.
type RoadmapCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the roadmap name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the roadmap slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Filters that the roadmap creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Compound filters, all of which need to be matched by the roadmap.
	And []*RoadmapCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the roadmap.
	Or []*RoadmapCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some roadmaps.
	Some *RoadmapFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all roadmaps.
	Every *RoadmapFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns RoadmapCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns RoadmapCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns RoadmapCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns RoadmapCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns RoadmapCollectionFilter.SlugId, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetCreator returns RoadmapCollectionFilter.Creator, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetCreator() *UserFilter { return v.Creator }

// GetAnd returns RoadmapCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetAnd() []*RoadmapCollectionFilter { return v.And }

// GetOr returns RoadmapCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetOr() []*RoadmapCollectionFilter { return v.Or }

// GetSome returns RoadmapCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetSome() *RoadmapFilter { return v.Some }

// GetEvery returns RoadmapCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetEvery() *RoadmapFilter { return v.Every }

// GetLength returns RoadmapCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *RoadmapCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Roadmap filtering options.
type RoadmapFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the roadmap name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the roadmap slug ID.
	SlugId *StringComparator `json:"slugId,omitempty"`
	// Filters that the roadmap creator must satisfy.
	Creator *UserFilter `json:"creator,omitempty"`
	// Compound filters, all of which need to be matched by the roadmap.
	And []*RoadmapFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the roadmap.
	Or []*RoadmapFilter `json:"or,omitempty"`
}

// GetId returns RoadmapFilter.Id, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns RoadmapFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns RoadmapFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns RoadmapFilter.Name, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetName() *StringComparator { return v.Name }

// GetSlugId returns RoadmapFilter.SlugId, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetSlugId() *StringComparator { return v.SlugId }

// GetCreator returns RoadmapFilter.Creator, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetCreator() *UserFilter { return v.Creator }

// GetAnd returns RoadmapFilter.And, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetAnd() []*RoadmapFilter { return v.And }

// GetOr returns RoadmapFilter.Or, and is useful for accessing the field via an interface.
func (v *RoadmapFilter) GetOr() []*RoadmapFilter { return v.Or }

type SlaStatus string

const (
	SlaStatusBreached   SlaStatus = "Breached"
	SlaStatusHighrisk   SlaStatus = "HighRisk"
	SlaStatusMediumrisk SlaStatus = "MediumRisk"
	SlaStatusLowrisk    SlaStatus = "LowRisk"
	SlaStatusCompleted  SlaStatus = "Completed"
	SlaStatusFailed     SlaStatus = "Failed"
)

// Comparator for sla status.
type SlaStatusComparator struct {
	// Equals constraint.
	Eq SlaStatus `json:"eq"`
	// Not-equals constraint.
	Neq SlaStatus `json:"neq"`
	// In-array constraint.
	In []SlaStatus `json:"in"`
	// Not-in-array constraint.
	Nin []SlaStatus `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
}

// GetEq returns SlaStatusComparator.Eq, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetEq() SlaStatus { return v.Eq }

// GetNeq returns SlaStatusComparator.Neq, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNeq() SlaStatus { return v.Neq }

// GetIn returns SlaStatusComparator.In, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetIn() []SlaStatus { return v.In }

// GetNin returns SlaStatusComparator.Nin, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNin() []SlaStatus { return v.Nin }

// GetNull returns SlaStatusComparator.Null, and is useful for accessing the field via an interface.
func (v *SlaStatusComparator) GetNull() bool { return v.Null }

// Comparator for issue source type.
type SourceMetadataComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
	// Compound filters, all of which need to be matched by the sub type.
	SubType *SubTypeComparator `json:"subType,omitempty"`
}

// GetEq returns SourceMetadataComparator.Eq, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetEq() string { return v.Eq }

// GetNeq returns SourceMetadataComparator.Neq, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetNeq() string { return v.Neq }

// GetIn returns SourceMetadataComparator.In, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetIn() []string { return v.In }

// GetNin returns SourceMetadataComparator.Nin, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetNin() []string { return v.Nin }

// GetNull returns SourceMetadataComparator.Null, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetNull() bool { return v.Null }

// GetSubType returns SourceMetadataComparator.SubType, and is useful for accessing the field via an interface.
func (v *SourceMetadataComparator) GetSubType() *SubTypeComparator { return v.SubType }

// Comparator for `sourceType` field.
type SourceTypeComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase string `json:"eqIgnoreCase"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase string `json:"neqIgnoreCase"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith string `json:"startsWith"`
	// Starts with case insensitive constraint. Matches any values that start with the given string.
	StartsWithIgnoreCase string `json:"startsWithIgnoreCase"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith string `json:"notStartsWith"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith string `json:"endsWith"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith string `json:"notEndsWith"`
	// Contains constraint. Matches any values that contain the given string.
	Contains string `json:"contains"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase string `json:"containsIgnoreCase"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains string `json:"notContains"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase string `json:"notContainsIgnoreCase"`
}

// GetEq returns SourceTypeComparator.Eq, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEq() string { return v.Eq }

// GetNeq returns SourceTypeComparator.Neq, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNeq() string { return v.Neq }

// GetIn returns SourceTypeComparator.In, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetIn() []string { return v.In }

// GetNin returns SourceTypeComparator.Nin, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNin() []string { return v.Nin }

// GetEqIgnoreCase returns SourceTypeComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEqIgnoreCase() string { return v.EqIgnoreCase }

// GetNeqIgnoreCase returns SourceTypeComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNeqIgnoreCase() string { return v.NeqIgnoreCase }

// GetStartsWith returns SourceTypeComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetStartsWith() string { return v.StartsWith }

// GetStartsWithIgnoreCase returns SourceTypeComparator.StartsWithIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetStartsWithIgnoreCase() string { return v.StartsWithIgnoreCase }

// GetNotStartsWith returns SourceTypeComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotStartsWith() string { return v.NotStartsWith }

// GetEndsWith returns SourceTypeComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetEndsWith() string { return v.EndsWith }

// GetNotEndsWith returns SourceTypeComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotEndsWith() string { return v.NotEndsWith }

// GetContains returns SourceTypeComparator.Contains, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetContains() string { return v.Contains }

// GetContainsIgnoreCase returns SourceTypeComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetContainsIgnoreCase() string { return v.ContainsIgnoreCase }

// GetNotContains returns SourceTypeComparator.NotContains, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotContains() string { return v.NotContains }

// GetNotContainsIgnoreCase returns SourceTypeComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *SourceTypeComparator) GetNotContainsIgnoreCase() string { return v.NotContainsIgnoreCase }

// Comparator for strings.
type StringArrayComparator struct {
	// Length of the array. Matches any values that have the given length.
	Length *NumberComparator `json:"length,omitempty"`
	// Compound filters, all of which need to be matched.
	Every []*StringItemComparator `json:"every,omitempty"`
	// Compound filters, one of which needs to be matched.
	Some []*StringItemComparator `json:"some,omitempty"`
}

// GetLength returns StringArrayComparator.Length, and is useful for accessing the field via an interface.
func (v *StringArrayComparator) GetLength() *NumberComparator { return v.Length }

// GetEvery returns StringArrayComparator.Every, and is useful for accessing the field via an interface.
func (v *StringArrayComparator) GetEvery() []*StringItemComparator { return v.Every }

// GetSome returns StringArrayComparator.Some, and is useful for accessing the field via an interface.
func (v *StringArrayComparator) GetSome() []*StringItemComparator { return v.Some }

// Comparator for strings.
type StringComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase string `json:"eqIgnoreCase"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase string `json:"neqIgnoreCase"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith string `json:"startsWith"`
	// Starts with case insensitive constraint. Matches any values that start with the given string.
	StartsWithIgnoreCase string `json:"startsWithIgnoreCase"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith string `json:"notStartsWith"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith string `json:"endsWith"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith string `json:"notEndsWith"`
	// Contains constraint. Matches any values that contain the given string.
	Contains string `json:"contains"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase string `json:"containsIgnoreCase"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains string `json:"notContains"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase string `json:"notContainsIgnoreCase"`
}

// GetEq returns StringComparator.Eq, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEq() string { return v.Eq }

// GetNeq returns StringComparator.Neq, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNeq() string { return v.Neq }

// GetIn returns StringComparator.In, and is useful for accessing the field via an interface.
func (v *StringComparator) GetIn() []string { return v.In }

// GetNin returns StringComparator.Nin, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNin() []string { return v.Nin }

// GetEqIgnoreCase returns StringComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEqIgnoreCase() string { return v.EqIgnoreCase }

// GetNeqIgnoreCase returns StringComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNeqIgnoreCase() string { return v.NeqIgnoreCase }

// GetStartsWith returns StringComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetStartsWith() string { return v.StartsWith }

// GetStartsWithIgnoreCase returns StringComparator.StartsWithIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetStartsWithIgnoreCase() string { return v.StartsWithIgnoreCase }

// GetNotStartsWith returns StringComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotStartsWith() string { return v.NotStartsWith }

// GetEndsWith returns StringComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetEndsWith() string { return v.EndsWith }

// GetNotEndsWith returns StringComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotEndsWith() string { return v.NotEndsWith }

// GetContains returns StringComparator.Contains, and is useful for accessing the field via an interface.
func (v *StringComparator) GetContains() string { return v.Contains }

// GetContainsIgnoreCase returns StringComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetContainsIgnoreCase() string { return v.ContainsIgnoreCase }

// GetNotContains returns StringComparator.NotContains, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotContains() string { return v.NotContains }

// GetNotContainsIgnoreCase returns StringComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringComparator) GetNotContainsIgnoreCase() string { return v.NotContainsIgnoreCase }

// Comparator for strings in arrays.
type StringItemComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Equals case insensitive. Matches any values that matches the given string case insensitive.
	EqIgnoreCase string `json:"eqIgnoreCase"`
	// Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
	NeqIgnoreCase string `json:"neqIgnoreCase"`
	// Starts with constraint. Matches any values that start with the given string.
	StartsWith string `json:"startsWith"`
	// Starts with case insensitive constraint. Matches any values that start with the given string.
	StartsWithIgnoreCase string `json:"startsWithIgnoreCase"`
	// Doesn't start with constraint. Matches any values that don't start with the given string.
	NotStartsWith string `json:"notStartsWith"`
	// Ends with constraint. Matches any values that end with the given string.
	EndsWith string `json:"endsWith"`
	// Doesn't end with constraint. Matches any values that don't end with the given string.
	NotEndsWith string `json:"notEndsWith"`
	// Contains constraint. Matches any values that contain the given string.
	Contains string `json:"contains"`
	// Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
	ContainsIgnoreCase string `json:"containsIgnoreCase"`
	// Doesn't contain constraint. Matches any values that don't contain the given string.
	NotContains string `json:"notContains"`
	// Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
	NotContainsIgnoreCase string `json:"notContainsIgnoreCase"`
}

// GetEq returns StringItemComparator.Eq, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetEq() string { return v.Eq }

// GetNeq returns StringItemComparator.Neq, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNeq() string { return v.Neq }

// GetIn returns StringItemComparator.In, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetIn() []string { return v.In }

// GetNin returns StringItemComparator.Nin, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNin() []string { return v.Nin }

// GetEqIgnoreCase returns StringItemComparator.EqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetEqIgnoreCase() string { return v.EqIgnoreCase }

// GetNeqIgnoreCase returns StringItemComparator.NeqIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNeqIgnoreCase() string { return v.NeqIgnoreCase }

// GetStartsWith returns StringItemComparator.StartsWith, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetStartsWith() string { return v.StartsWith }

// GetStartsWithIgnoreCase returns StringItemComparator.StartsWithIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetStartsWithIgnoreCase() string { return v.StartsWithIgnoreCase }

// GetNotStartsWith returns StringItemComparator.NotStartsWith, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNotStartsWith() string { return v.NotStartsWith }

// GetEndsWith returns StringItemComparator.EndsWith, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetEndsWith() string { return v.EndsWith }

// GetNotEndsWith returns StringItemComparator.NotEndsWith, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNotEndsWith() string { return v.NotEndsWith }

// GetContains returns StringItemComparator.Contains, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetContains() string { return v.Contains }

// GetContainsIgnoreCase returns StringItemComparator.ContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetContainsIgnoreCase() string { return v.ContainsIgnoreCase }

// GetNotContains returns StringItemComparator.NotContains, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNotContains() string { return v.NotContains }

// GetNotContainsIgnoreCase returns StringItemComparator.NotContainsIgnoreCase, and is useful for accessing the field via an interface.
func (v *StringItemComparator) GetNotContainsIgnoreCase() string { return v.NotContainsIgnoreCase }

// Comparator for source type.
type SubTypeComparator struct {
	// Equals constraint.
	Eq string `json:"eq"`
	// Not-equals constraint.
	Neq string `json:"neq"`
	// In-array constraint.
	In []string `json:"in"`
	// Not-in-array constraint.
	Nin []string `json:"nin"`
	// Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
	Null bool `json:"null"`
}

// GetEq returns SubTypeComparator.Eq, and is useful for accessing the field via an interface.
func (v *SubTypeComparator) GetEq() string { return v.Eq }

// GetNeq returns SubTypeComparator.Neq, and is useful for accessing the field via an interface.
func (v *SubTypeComparator) GetNeq() string { return v.Neq }

// GetIn returns SubTypeComparator.In, and is useful for accessing the field via an interface.
func (v *SubTypeComparator) GetIn() []string { return v.In }

// GetNin returns SubTypeComparator.Nin, and is useful for accessing the field via an interface.
func (v *SubTypeComparator) GetNin() []string { return v.Nin }

// GetNull returns SubTypeComparator.Null, and is useful for accessing the field via an interface.
func (v *SubTypeComparator) GetNull() bool { return v.Null }

// Roadmap collection filtering options.
type TeamCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Compound filters, all of which need to be matched by the roadmap.
	And []*TeamCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the roadmap.
	Or []*TeamCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some roadmaps.
	Some *TeamFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all roadmaps.
	Every *TeamFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns TeamCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns TeamCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns TeamCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetAnd returns TeamCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetAnd() []*TeamCollectionFilter { return v.And }

// GetOr returns TeamCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetOr() []*TeamCollectionFilter { return v.Or }

// GetSome returns TeamCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetSome() *TeamFilter { return v.Some }

// GetEvery returns TeamCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetEvery() *TeamFilter { return v.Every }

// GetLength returns TeamCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *TeamCollectionFilter) GetLength() *NumberComparator { return v.Length }

// Team filtering options.
type TeamFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the team name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the team key.
	Key *StringComparator `json:"key,omitempty"`
	// Comparator for the team description.
	Description *NullableStringComparator `json:"description,omitempty"`
	// Filters that the teams issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Compound filters, all of which need to be matched by the team.
	And []*TeamFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the team.
	Or []*TeamFilter `json:"or,omitempty"`
}

// GetId returns TeamFilter.Id, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns TeamFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns TeamFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns TeamFilter.Name, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetName() *StringComparator { return v.Name }

// GetKey returns TeamFilter.Key, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetKey() *StringComparator { return v.Key }

// GetDescription returns TeamFilter.Description, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetDescription() *NullableStringComparator { return v.Description }

// GetIssues returns TeamFilter.Issues, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetAnd returns TeamFilter.And, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetAnd() []*TeamFilter { return v.And }

// GetOr returns TeamFilter.Or, and is useful for accessing the field via an interface.
func (v *TeamFilter) GetOr() []*TeamFilter { return v.Or }

// User filtering options.
type UserCollectionFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Compound filters, all of which need to be matched by the user.
	And []*UserCollectionFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*UserCollectionFilter `json:"or,omitempty"`
	// Filters that needs to be matched by some users.
	Some *UserFilter `json:"some,omitempty"`
	// Filters that needs to be matched by all users.
	Every *UserFilter `json:"every,omitempty"`
	// Comparator for the collection length.
	Length *NumberComparator `json:"length,omitempty"`
}

// GetId returns UserCollectionFilter.Id, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns UserCollectionFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns UserCollectionFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns UserCollectionFilter.Name, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetName() *StringComparator { return v.Name }

// GetDisplayName returns UserCollectionFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns UserCollectionFilter.Email, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetEmail() *StringComparator { return v.Email }

// GetActive returns UserCollectionFilter.Active, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetActive() *BooleanComparator { return v.Active }

// GetAssignedIssues returns UserCollectionFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetAdmin returns UserCollectionFilter.Admin, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetIsMe returns UserCollectionFilter.IsMe, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetAnd returns UserCollectionFilter.And, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetAnd() []*UserCollectionFilter { return v.And }

// GetOr returns UserCollectionFilter.Or, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetOr() []*UserCollectionFilter { return v.Or }

// GetSome returns UserCollectionFilter.Some, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetSome() *UserFilter { return v.Some }

// GetEvery returns UserCollectionFilter.Every, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetEvery() *UserFilter { return v.Every }

// GetLength returns UserCollectionFilter.Length, and is useful for accessing the field via an interface.
func (v *UserCollectionFilter) GetLength() *NumberComparator { return v.Length }

// User filtering options.
type UserFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the user's name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the user's display name.
	DisplayName *StringComparator `json:"displayName,omitempty"`
	// Comparator for the user's email.
	Email *StringComparator `json:"email,omitempty"`
	// Comparator for the user's activity status.
	Active *BooleanComparator `json:"active,omitempty"`
	// Filters that the users assigned issues must satisfy.
	AssignedIssues *IssueCollectionFilter `json:"assignedIssues,omitempty"`
	// Comparator for the user's admin status.
	Admin *BooleanComparator `json:"admin,omitempty"`
	// Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
	IsMe *BooleanComparator `json:"isMe,omitempty"`
	// Compound filters, all of which need to be matched by the user.
	And []*UserFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the user.
	Or []*UserFilter `json:"or,omitempty"`
}

// GetId returns UserFilter.Id, and is useful for accessing the field via an interface.
func (v *UserFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns UserFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns UserFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns UserFilter.Name, and is useful for accessing the field via an interface.
func (v *UserFilter) GetName() *StringComparator { return v.Name }

// GetDisplayName returns UserFilter.DisplayName, and is useful for accessing the field via an interface.
func (v *UserFilter) GetDisplayName() *StringComparator { return v.DisplayName }

// GetEmail returns UserFilter.Email, and is useful for accessing the field via an interface.
func (v *UserFilter) GetEmail() *StringComparator { return v.Email }

// GetActive returns UserFilter.Active, and is useful for accessing the field via an interface.
func (v *UserFilter) GetActive() *BooleanComparator { return v.Active }

// GetAssignedIssues returns UserFilter.AssignedIssues, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAssignedIssues() *IssueCollectionFilter { return v.AssignedIssues }

// GetAdmin returns UserFilter.Admin, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAdmin() *BooleanComparator { return v.Admin }

// GetIsMe returns UserFilter.IsMe, and is useful for accessing the field via an interface.
func (v *UserFilter) GetIsMe() *BooleanComparator { return v.IsMe }

// GetAnd returns UserFilter.And, and is useful for accessing the field via an interface.
func (v *UserFilter) GetAnd() []*UserFilter { return v.And }

// GetOr returns UserFilter.Or, and is useful for accessing the field via an interface.
func (v *UserFilter) GetOr() []*UserFilter { return v.Or }

// Workflow state filtering options.
type WorkflowStateFilter struct {
	// Comparator for the identifier.
	Id *IDComparator `json:"id,omitempty"`
	// Comparator for the created at date.
	CreatedAt *DateComparator `json:"createdAt,omitempty"`
	// Comparator for the updated at date.
	UpdatedAt *DateComparator `json:"updatedAt,omitempty"`
	// Comparator for the workflow state name.
	Name *StringComparator `json:"name,omitempty"`
	// Comparator for the workflow state description.
	Description *StringComparator `json:"description,omitempty"`
	// Comparator for the workflow state position.
	Position *NumberComparator `json:"position,omitempty"`
	// Comparator for the workflow state type.
	Type *StringComparator `json:"type,omitempty"`
	// Filters that the workflow states team must satisfy.
	Team *TeamFilter `json:"team,omitempty"`
	// Filters that the workflow states issues must satisfy.
	Issues *IssueCollectionFilter `json:"issues,omitempty"`
	// Compound filters, all of which need to be matched by the workflow state.
	And []*WorkflowStateFilter `json:"and,omitempty"`
	// Compound filters, one of which need to be matched by the workflow state.
	Or []*WorkflowStateFilter `json:"or,omitempty"`
}

// GetId returns WorkflowStateFilter.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetId() *IDComparator { return v.Id }

// GetCreatedAt returns WorkflowStateFilter.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetCreatedAt() *DateComparator { return v.CreatedAt }

// GetUpdatedAt returns WorkflowStateFilter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetUpdatedAt() *DateComparator { return v.UpdatedAt }

// GetName returns WorkflowStateFilter.Name, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetName() *StringComparator { return v.Name }

// GetDescription returns WorkflowStateFilter.Description, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetDescription() *StringComparator { return v.Description }

// GetPosition returns WorkflowStateFilter.Position, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetPosition() *NumberComparator { return v.Position }

// GetType returns WorkflowStateFilter.Type, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetType() *StringComparator { return v.Type }

// GetTeam returns WorkflowStateFilter.Team, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetTeam() *TeamFilter { return v.Team }

// GetIssues returns WorkflowStateFilter.Issues, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetIssues() *IssueCollectionFilter { return v.Issues }

// GetAnd returns WorkflowStateFilter.And, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetAnd() []*WorkflowStateFilter { return v.And }

// GetOr returns WorkflowStateFilter.Or, and is useful for accessing the field via an interface.
func (v *WorkflowStateFilter) GetOr() []*WorkflowStateFilter { return v.Or }

// __IssueLabelsInput is used internally by genqlient
type __IssueLabelsInput struct {
	Filter *IssueLabelFilter `json:"filter,omitempty"`
}

// GetFilter returns __IssueLabelsInput.Filter, and is useful for accessing the field via an interface.
func (v *__IssueLabelsInput) GetFilter() *IssueLabelFilter { return v.Filter }

// The query or mutation executed by IssueLabels.
const IssueLabels_Operation = `
query IssueLabels ($filter: IssueLabelFilter) {
	issueLabels(filter: $filter) {
		nodes {
			id
			name
		}
	}
}
`

func IssueLabels(
	ctx_ context.Context,
	client_ graphql.Client,
	filter *IssueLabelFilter,
) (*IssueLabelsResponse, error) {
	req_ := &graphql.Request{
		OpName: "IssueLabels",
		Query:  IssueLabels_Operation,
		Variables: &__IssueLabelsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ IssueLabelsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
